
01_bld_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e4  080030e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030ec  080030ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08003164  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08003164  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b50  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b4  00000000  00000000  00029bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ae8  00000000  00000000  0002c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000882f  00000000  00000000  00041c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086680  00000000  00000000  0004a4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0b47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002034  00000000  00000000  000d0b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002fc4 	.word	0x08002fc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002fc4 	.word	0x08002fc4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fcb6 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f82c 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f908 	bl	80007a8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000598:	f000 f89e 	bl	80006d8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f8da 	bl	8000754 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f8ae 	bl	8000700 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005a4:	f000 f88c 	bl	80006c0 <MX_NVIC_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* Lets check whether button is pressed or not, if not pressed jump to user application */
		if (HAL_GPIO_ReadPin(GPIOA, user_btn_Pin) == 1) {
 80005a8:	2101      	movs	r1, #1
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <main+0x58>)
 80005ac:	f001 f828 	bl	8001600 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d108      	bne.n	80005c8 <main+0x40>
//			printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
			HAL_GPIO_WritePin(GPIOD, led_blue_Pin, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x5c>)
 80005be:	f001 f837 	bl	8001630 <HAL_GPIO_WritePin>
			//we should continue in bootloader mode
			bootloaderMode();
 80005c2:	f000 f96b 	bl	800089c <bootloaderMode>
 80005c6:	e7ef      	b.n	80005a8 <main+0x20>

		} else {
			printmsg(
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x60>)
 80005ca:	f000 f941 	bl	8000850 <printmsg>
					"BL_DEBUG_MSG:Button is not pressed .. executing user app\n\r");
			HAL_GPIO_WritePin(GPIOD, led_orange_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <main+0x5c>)
 80005d6:	f001 f82b 	bl	8001630 <HAL_GPIO_WritePin>

			//jump to user application
			userMode();
 80005da:	f000 fae1 	bl	8000ba0 <userMode>
		if (HAL_GPIO_ReadPin(GPIOA, user_btn_Pin) == 1) {
 80005de:	e7e3      	b.n	80005a8 <main+0x20>
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020c00 	.word	0x40020c00
 80005e8:	08002fdc 	.word	0x08002fdc

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 f8ac 	bl	8002758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000660:	23c8      	movs	r3, #200	; 0xc8
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000664:	2304      	movs	r3, #4
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f81b 	bl	80016ac <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 fabe 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2103      	movs	r1, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fa7c 	bl	8001b9c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006aa:	f000 faa7 	bl	8000bfc <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	2006      	movs	r0, #6
 80006ca:	f000 fd98 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006ce:	2006      	movs	r0, #6
 80006d0:	f000 fdb1 	bl	8001236 <HAL_NVIC_EnableIRQ>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_CRC_Init+0x20>)
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <MX_CRC_Init+0x24>)
 80006e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_CRC_Init+0x20>)
 80006e4:	f000 fdc1 	bl	800126a <HAL_CRC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ee:	f000 fa85 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000098 	.word	0x20000098
 80006fc:	40023000 	.word	0x40023000

08000700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000738:	f001 fc2c 	bl	8001f94 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 fa5b 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000a0 	.word	0x200000a0
 8000750:	40011000 	.word	0x40011000

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f001 fc02 	bl	8001f94 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 fa31 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001ac 	.word	0x200001ac
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a18      	ldr	r2, [pc, #96]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_GPIO_Init+0x9c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0xa0>)
 80007fe:	f000 ff17 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_btn_Pin */
  GPIO_InitStruct.Pin = user_btn_Pin;
 8000802:	2301      	movs	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000806:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_btn_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_GPIO_Init+0xa4>)
 8000818:	f000 fd6e 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_green_Pin led_orange_Pin led_red_Pin led_blue_Pin */
  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin;
 800081c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xa0>)
 8000836:	f000 fd5f 	bl	80012f8 <HAL_GPIO_Init>

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020c00 	.word	0x40020c00
 800084c:	40020000 	.word	0x40020000

08000850 <printmsg>:

/* USER CODE BEGIN 4 */

/* prints formatted string to console over UART */
void printmsg(char *format, ...) {
 8000850:	b40f      	push	{r0, r1, r2, r3}
 8000852:	b580      	push	{r7, lr}
 8000854:	b096      	sub	sp, #88	; 0x58
 8000856:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000858:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800085c:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000866:	4618      	mov	r0, r3
 8000868:	f001 ff94 	bl	8002794 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fcb5 	bl	80001e0 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	f107 0108 	add.w	r1, r7, #8
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <printmsg+0x48>)
 8000884:	f001 fbd3 	bl	800202e <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000888:	bf00      	nop
 800088a:	3758      	adds	r7, #88	; 0x58
 800088c:	46bd      	mov	sp, r7
 800088e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000892:	b004      	add	sp, #16
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	200001ac 	.word	0x200001ac

0800089c <bootloaderMode>:

void bootloaderMode(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0

	uint8_t length_cmd = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	71fb      	strb	r3, [r7, #7]
	while (1) {
		memset(rc_data, 0, rc_data_length);
 80008a6:	22c8      	movs	r2, #200	; 0xc8
 80008a8:	2100      	movs	r1, #0
 80008aa:	482f      	ldr	r0, [pc, #188]	; (8000968 <bootloaderMode+0xcc>)
 80008ac:	f001 ff54 	bl	8002758 <memset>
		HAL_UART_Receive(&huart2, rc_data, 1, HAL_MAX_DELAY);
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	2201      	movs	r2, #1
 80008b6:	492c      	ldr	r1, [pc, #176]	; (8000968 <bootloaderMode+0xcc>)
 80008b8:	482c      	ldr	r0, [pc, #176]	; (800096c <bootloaderMode+0xd0>)
 80008ba:	f001 fc4a 	bl	8002152 <HAL_UART_Receive>
		length_cmd = rc_data[0];
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <bootloaderMode+0xcc>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart2, &rc_data[1], length_cmd, HAL_MAX_DELAY);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	4928      	ldr	r1, [pc, #160]	; (8000970 <bootloaderMode+0xd4>)
 80008ce:	4827      	ldr	r0, [pc, #156]	; (800096c <bootloaderMode+0xd0>)
 80008d0:	f001 fc3f 	bl	8002152 <HAL_UART_Receive>

		switch (rc_data[1]) {
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <bootloaderMode+0xcc>)
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	3b51      	subs	r3, #81	; 0x51
 80008da:	2b0b      	cmp	r3, #11
 80008dc:	d83e      	bhi.n	800095c <bootloaderMode+0xc0>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <bootloaderMode+0x48>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	08000915 	.word	0x08000915
 80008e8:	0800091b 	.word	0x0800091b
 80008ec:	08000921 	.word	0x08000921
 80008f0:	08000927 	.word	0x08000927
 80008f4:	0800092d 	.word	0x0800092d
 80008f8:	08000933 	.word	0x08000933
 80008fc:	08000939 	.word	0x08000939
 8000900:	0800093f 	.word	0x0800093f
 8000904:	08000945 	.word	0x08000945
 8000908:	0800094b 	.word	0x0800094b
 800090c:	08000951 	.word	0x08000951
 8000910:	08000957 	.word	0x08000957
		case BL_GET_VER:
			BL_GET_VER_handler();
 8000914:	f000 f8a4 	bl	8000a60 <BL_GET_VER_handler>
			break;
 8000918:	e024      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_GET_HELP:
			BL_GET_HELP_handler();
 800091a:	f000 f8cb 	bl	8000ab4 <BL_GET_HELP_handler>
			break;
 800091e:	e021      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_GET_CID:
			BL_GET_CID_handler();
 8000920:	f000 f8f8 	bl	8000b14 <BL_GET_CID_handler>
			break;
 8000924:	e01e      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_GET_RDP_STATUS:
			BL_GET_RDP_STATUS_handler();
 8000926:	f000 f8fc 	bl	8000b22 <BL_GET_RDP_STATUS_handler>
			break;
 800092a:	e01b      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_GO_TO_ADDR:
			BL_GO_TO_ADDR_handler();
 800092c:	f000 f900 	bl	8000b30 <BL_GO_TO_ADDR_handler>
			break;
 8000930:	e018      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_FLASH_ERASE:
			BL_FLASH_ERASE_handler();
 8000932:	f000 f904 	bl	8000b3e <BL_FLASH_ERASE_handler>
			break;
 8000936:	e015      	b.n	8000964 <bootloaderMode+0xc8>
		case BBL_MEM_WRITE:
			BL_MEM_WRITE_handler();
 8000938:	f000 f908 	bl	8000b4c <BL_MEM_WRITE_handler>
			break;
 800093c:	e012      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_EN_R_W_PROTECT:
			BL_EN_R_W_PROTECT_handler();
 800093e:	f000 f90c 	bl	8000b5a <BL_EN_R_W_PROTECT_handler>
			break;
 8000942:	e00f      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_MEM_READ:
			BL_MEM_READ_handler();
 8000944:	f000 f910 	bl	8000b68 <BL_MEM_READ_handler>
			break;
 8000948:	e00c      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_READ_SECTOR_STATUS:
			BL_READ_SECTOR_STATUS_handler();
 800094a:	f000 f914 	bl	8000b76 <BL_READ_SECTOR_STATUS_handler>
			break;
 800094e:	e009      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_OTP_READ:
			BL_OTP_READ_handler();
 8000950:	f000 f918 	bl	8000b84 <BL_OTP_READ_handler>
			break;
 8000954:	e006      	b.n	8000964 <bootloaderMode+0xc8>
		case BL_DIS_R_W_PROTECT:
			BL_DIS_R_W_PROTECT_handler();
 8000956:	f000 f91c 	bl	8000b92 <BL_DIS_R_W_PROTECT_handler>
			break;
 800095a:	e003      	b.n	8000964 <bootloaderMode+0xc8>
		default:
			printmsg("invalid command!!!");
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <bootloaderMode+0xd8>)
 800095e:	f7ff ff77 	bl	8000850 <printmsg>
			break;
 8000962:	bf00      	nop
		memset(rc_data, 0, rc_data_length);
 8000964:	e79f      	b.n	80008a6 <bootloaderMode+0xa>
 8000966:	bf00      	nop
 8000968:	200000e4 	.word	0x200000e4
 800096c:	200001ac 	.word	0x200001ac
 8000970:	200000e5 	.word	0x200000e5
 8000974:	08003018 	.word	0x08003018

08000978 <checkCRC>:
		}
	}
}

uint8_t checkCRC(uint8_t *pBuffer_data, uint8_t pBuffer_len_cmd,
		uint32_t CRC_host) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	460b      	mov	r3, r1
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	72fb      	strb	r3, [r7, #11]
	uint32_t value_CRC = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]

	for (uint8_t var = 0; var <= (pBuffer_len_cmd - 4); ++var) {
 800098a:	2300      	movs	r3, #0
 800098c:	76fb      	strb	r3, [r7, #27]
 800098e:	e00f      	b.n	80009b0 <checkCRC+0x38>
		uint32_t value = pBuffer_data[var];
 8000990:	7efb      	ldrb	r3, [r7, #27]
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	617b      	str	r3, [r7, #20]
		value_CRC = HAL_CRC_Accumulate(&hcrc, &value, 1);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2201      	movs	r2, #1
 80009a0:	4619      	mov	r1, r3
 80009a2:	480f      	ldr	r0, [pc, #60]	; (80009e0 <checkCRC+0x68>)
 80009a4:	f000 fc7d 	bl	80012a2 <HAL_CRC_Accumulate>
 80009a8:	61f8      	str	r0, [r7, #28]
	for (uint8_t var = 0; var <= (pBuffer_len_cmd - 4); ++var) {
 80009aa:	7efb      	ldrb	r3, [r7, #27]
 80009ac:	3301      	adds	r3, #1
 80009ae:	76fb      	strb	r3, [r7, #27]
 80009b0:	7afb      	ldrb	r3, [r7, #11]
 80009b2:	1eda      	subs	r2, r3, #3
 80009b4:	7efb      	ldrb	r3, [r7, #27]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	dcea      	bgt.n	8000990 <checkCRC+0x18>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <checkCRC+0x68>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <checkCRC+0x68>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f042 0201 	orr.w	r2, r2, #1
 80009c8:	609a      	str	r2, [r3, #8]
	if (value_CRC == CRC_host)
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d101      	bne.n	80009d6 <checkCRC+0x5e>
		return CRC_CORRECT;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <checkCRC+0x60>
	return CRC_FAILED;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000098 	.word	0x20000098

080009e4 <send_ACK>:

void send_ACK(uint8_t length) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buffer[2];
	tx_buffer[0] = BL_ACK;
 80009ee:	23a5      	movs	r3, #165	; 0xa5
 80009f0:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = length;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart2, tx_buffer, 2, HAL_MAX_DELAY);
 80009f6:	f107 010c 	add.w	r1, r7, #12
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	2202      	movs	r2, #2
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <send_ACK+0x2c>)
 8000a02:	f001 fb14 	bl	800202e <HAL_UART_Transmit>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001ac 	.word	0x200001ac

08000a14 <send_NACK>:

void send_NACK(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[1];
	tx_buffer[0] = BL_NACK;
 8000a1a:	237f      	movs	r3, #127	; 0x7f
 8000a1c:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, tx_buffer, 1, HAL_MAX_DELAY);
 8000a1e:	1d39      	adds	r1, r7, #4
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	2201      	movs	r2, #1
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <send_NACK+0x20>)
 8000a28:	f001 fb01 	bl	800202e <HAL_UART_Transmit>

}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200001ac 	.word	0x200001ac

08000a38 <send_Reply>:

void send_Reply(uint8_t *pBuffer, uint8_t length) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart2, pBuffer, length, HAL_MAX_DELAY);
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <send_Reply+0x24>)
 8000a50:	f001 faed 	bl	800202e <HAL_UART_Transmit>

}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200001ac 	.word	0x200001ac

08000a60 <BL_GET_VER_handler>:

void BL_GET_VER_handler(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

	uint32_t length_cmd = rc_data[0] + 1;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <BL_GET_VER_handler+0x50>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3b04      	subs	r3, #4
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <BL_GET_VER_handler+0x50>)
 8000a74:	4413      	add	r3, r2
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60bb      	str	r3, [r7, #8]
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <BL_GET_VER_handler+0x50>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <BL_GET_VER_handler+0x50>)
 8000a84:	f7ff ff78 	bl	8000978 <checkCRC>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00a      	beq.n	8000aa4 <BL_GET_VER_handler+0x44>
		send_ACK(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff ffa8 	bl	80009e4 <send_ACK>
		uint8_t bootloader_ver = BL_VERSION;
 8000a94:	2310      	movs	r3, #16
 8000a96:	71fb      	strb	r3, [r7, #7]
		send_Reply(&bootloader_ver, 1);
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffcb 	bl	8000a38 <send_Reply>

	} else {
		send_NACK();
	}
}
 8000aa2:	e001      	b.n	8000aa8 <BL_GET_VER_handler+0x48>
		send_NACK();
 8000aa4:	f7ff ffb6 	bl	8000a14 <send_NACK>
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000e4 	.word	0x200000e4

08000ab4 <BL_GET_HELP_handler>:

void BL_GET_HELP_handler(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
	uint32_t length_cmd = rc_data[0] + 1;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <BL_GET_HELP_handler+0x58>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3b04      	subs	r3, #4
 8000ac6:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <BL_GET_HELP_handler+0x58>)
 8000ac8:	4413      	add	r3, r2
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	613b      	str	r3, [r7, #16]
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <BL_GET_HELP_handler+0x58>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <BL_GET_HELP_handler+0x58>)
 8000ad8:	f7ff ff4e 	bl	8000978 <checkCRC>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00d      	beq.n	8000afe <BL_GET_HELP_handler+0x4a>
		send_ACK(12);
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f7ff ff7e 	bl	80009e4 <send_ACK>
		uint8_t all_cmd[] = { BL_GET_VER, BL_GET_HELP, BL_GET_CID,
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <BL_GET_HELP_handler+0x5c>)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		BL_GET_RDP_STATUS, BL_GO_TO_ADDR,
		BL_FLASH_ERASE, BBL_MEM_WRITE, BL_EN_R_W_PROTECT, BL_MEM_READ,
		BL_READ_SECTOR_STATUS,
		BL_OTP_READ, BL_DIS_R_W_PROTECT };
		send_Reply(all_cmd, sizeof(all_cmd));
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	210c      	movs	r1, #12
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff9e 	bl	8000a38 <send_Reply>

	} else {
		send_NACK();
	}
}
 8000afc:	e001      	b.n	8000b02 <BL_GET_HELP_handler+0x4e>
		send_NACK();
 8000afe:	f7ff ff89 	bl	8000a14 <send_NACK>
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000e4 	.word	0x200000e4
 8000b10:	0800302c 	.word	0x0800302c

08000b14 <BL_GET_CID_handler>:

void BL_GET_CID_handler(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <BL_GET_RDP_STATUS_handler>:

void BL_GET_RDP_STATUS_handler(void) {
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <BL_GO_TO_ADDR_handler>:

void BL_GO_TO_ADDR_handler(void) {
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <BL_FLASH_ERASE_handler>:

void BL_FLASH_ERASE_handler(void) {
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <BL_MEM_WRITE_handler>:

void BL_MEM_WRITE_handler(void) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <BL_EN_R_W_PROTECT_handler>:

void BL_EN_R_W_PROTECT_handler(void) {
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <BL_MEM_READ_handler>:

void BL_MEM_READ_handler(void) {
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <BL_READ_SECTOR_STATUS_handler>:

void BL_READ_SECTOR_STATUS_handler(void) {
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <BL_OTP_READ_handler>:

void BL_OTP_READ_handler(void) {
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <BL_DIS_R_W_PROTECT_handler>:

void BL_DIS_R_W_PROTECT_handler(void) {
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <userMode>:

void userMode(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0

	void (*reset_handler)(void);
	printmsg("bootloader_jump_to_user_app\n\r");
 8000ba6:	4810      	ldr	r0, [pc, #64]	; (8000be8 <userMode+0x48>)
 8000ba8:	f7ff fe52 	bl	8000850 <printmsg>

// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <userMode+0x4c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]

	printmsg("BL_DEBUG_MSG:MSP value : %#x\n\r", msp_value);
 8000bb2:	68f9      	ldr	r1, [r7, #12]
 8000bb4:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <userMode+0x50>)
 8000bb6:	f7ff fe4b 	bl	8000850 <printmsg>
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	f383 8808 	msr	MSP, r3
}
 8000bc4:	bf00      	nop

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address =
			*(volatile uint32_t*) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <userMode+0x54>)
	uint32_t resethandler_address =
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60bb      	str	r3, [r7, #8]

	reset_handler = (void*) resethandler_address;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	607b      	str	r3, [r7, #4]
	printmsg("app reset handler addr : %#x\n\r", reset_handler);
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <userMode+0x58>)
 8000bd4:	f7ff fe3c 	bl	8000850 <printmsg>

//3. jump to reset handler of the user application
	HAL_DeInit();
 8000bd8:	f000 f9b2 	bl	8000f40 <HAL_DeInit>
	reset_handler();
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4798      	blx	r3
//	printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n\r", app_reset_handler);
//
//	//3. jump to reset handler of the user application
//	HAL_DeInit();
//	app_reset_handler();
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	08003038 	.word	0x08003038
 8000bec:	08008000 	.word	0x08008000
 8000bf0:	08003058 	.word	0x08003058
 8000bf4:	08008004 	.word	0x08008004
 8000bf8:	08003078 	.word	0x08003078

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_MspInit+0x5c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c46:	2007      	movs	r0, #7
 8000c48:	f000 face 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2005      	movs	r0, #5
 8000c52:	f000 fad4 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c56:	2005      	movs	r0, #5
 8000c58:	f000 faed 	bl	8001236 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <HAL_CRC_MspInit+0x3c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d10d      	bne.n	8000c96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_CRC_MspInit+0x40>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <HAL_CRC_MspInit+0x40>)
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <HAL_CRC_MspInit+0x40>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023000 	.word	0x40023000
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	; 0x30
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a32      	ldr	r2, [pc, #200]	; (8000d94 <HAL_UART_MspInit+0xe8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12d      	bne.n	8000d2a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a30      	ldr	r2, [pc, #192]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a29      	ldr	r2, [pc, #164]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	481e      	ldr	r0, [pc, #120]	; (8000d9c <HAL_UART_MspInit+0xf0>)
 8000d24:	f000 fae8 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d28:	e030      	b.n	8000d8c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <HAL_UART_MspInit+0xf4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d12b      	bne.n	8000d8c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_UART_MspInit+0xec>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <HAL_UART_MspInit+0xf8>)
 8000d88:	f000 fab6 	bl	80012f8 <HAL_GPIO_Init>
}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	; 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40011000 	.word	0x40011000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40020c00 	.word	0x40020c00

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f908 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(user_btn_Pin);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f000 fc28 	bl	8001664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f001 fc5c 	bl	8002704 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20020000 	.word	0x20020000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	2000008c 	.word	0x2000008c
 8000e80:	20000208 	.word	0x20000208

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff ffd7 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f001 fc1b 	bl	8002710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fb55 	bl	8000588 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eec:	080030f4 	.word	0x080030f4
  ldr r2, =_sbss
 8000ef0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ef4:	20000204 	.word	0x20000204

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f95f 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f83c 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe6a 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <HAL_DeInit+0x54>)
 8000f46:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_DeInit+0x54>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_DeInit+0x54>)
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_DeInit+0x54>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_DeInit+0x54>)
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_DeInit+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_DeInit+0x54>)
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <HAL_DeInit+0x54>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_DeInit+0x54>)
 8000f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f82:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_DeInit+0x54>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f8a:	f000 f805 	bl	8000f98 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f943 	bl	8001252 <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 f90b 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	200001f0 	.word	0x200001f0

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200001f0 	.word	0x200001f0

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e00e      	b.n	800129a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	795b      	ldrb	r3, [r3, #5]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d105      	bne.n	8001292 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fceb 	bl	8000c68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b087      	sub	sp, #28
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2202      	movs	r2, #2
 80012b6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e00a      	b.n	80012d4 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	441a      	add	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d3f0      	bcc.n	80012be <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80012ea:	693b      	ldr	r3, [r7, #16]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	e159      	b.n	80015c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	429a      	cmp	r2, r3
 800132e:	f040 8148 	bne.w	80015c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b01      	cmp	r3, #1
 800133c:	d005      	beq.n	800134a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	2b02      	cmp	r3, #2
 8001348:	d130      	bne.n	80013ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 0201 	and.w	r2, r3, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d017      	beq.n	80013e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d123      	bne.n	800143c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	69b9      	ldr	r1, [r7, #24]
 8001438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a2 	beq.w	80015c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b57      	ldr	r3, [pc, #348]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a56      	ldr	r2, [pc, #344]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149a:	4a52      	ldr	r2, [pc, #328]	; (80015e4 <HAL_GPIO_Init+0x2ec>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <HAL_GPIO_Init+0x2f0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x202>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a48      	ldr	r2, [pc, #288]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x1fe>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a47      	ldr	r2, [pc, #284]	; (80015f0 <HAL_GPIO_Init+0x2f8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x1fa>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a46      	ldr	r2, [pc, #280]	; (80015f4 <HAL_GPIO_Init+0x2fc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x1f6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <HAL_GPIO_Init+0x300>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x1f2>
 80014e6:	2304      	movs	r3, #4
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014fa:	2300      	movs	r3, #0
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800150c:	4935      	ldr	r1, [pc, #212]	; (80015e4 <HAL_GPIO_Init+0x2ec>)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <HAL_GPIO_Init+0x304>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800153e:	4a2f      	ldr	r2, [pc, #188]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001568:	4a24      	ldr	r2, [pc, #144]	; (80015fc <HAL_GPIO_Init+0x304>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001592:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_GPIO_Init+0x304>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_GPIO_Init+0x304>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	f67f aea2 	bls.w	8001314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40013c00 	.word	0x40013c00

08001600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e001      	b.n	8001622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f806 	bl	8001694 <HAL_GPIO_EXTI_Callback>
  }
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40013c00 	.word	0x40013c00

08001694 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e264      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d075      	beq.n	80017b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ca:	4ba3      	ldr	r3, [pc, #652]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d00c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d6:	4ba0      	ldr	r3, [pc, #640]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d112      	bne.n	8001708 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e2:	4b9d      	ldr	r3, [pc, #628]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ee:	d10b      	bne.n	8001708 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	4b99      	ldr	r3, [pc, #612]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d05b      	beq.n	80017b4 <HAL_RCC_OscConfig+0x108>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d157      	bne.n	80017b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e23f      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d106      	bne.n	8001720 <HAL_RCC_OscConfig+0x74>
 8001712:	4b91      	ldr	r3, [pc, #580]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a90      	ldr	r2, [pc, #576]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e01d      	b.n	800175c <HAL_RCC_OscConfig+0xb0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x98>
 800172a:	4b8b      	ldr	r3, [pc, #556]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a8a      	ldr	r2, [pc, #552]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b88      	ldr	r3, [pc, #544]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a87      	ldr	r2, [pc, #540]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e00b      	b.n	800175c <HAL_RCC_OscConfig+0xb0>
 8001744:	4b84      	ldr	r3, [pc, #528]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a83      	ldr	r2, [pc, #524]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b81      	ldr	r3, [pc, #516]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a80      	ldr	r2, [pc, #512]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fc64 	bl	8001030 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fc60 	bl	8001030 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e204      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b76      	ldr	r3, [pc, #472]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0xc0>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fc50 	bl	8001030 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fc4c 	bl	8001030 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e1f0      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a6:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0xe8>
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d063      	beq.n	800188a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017c2:	4b65      	ldr	r3, [pc, #404]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00b      	beq.n	80017e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ce:	4b62      	ldr	r3, [pc, #392]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d11c      	bne.n	8001814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d116      	bne.n	8001814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_RCC_OscConfig+0x152>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e1c4      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fe:	4b56      	ldr	r3, [pc, #344]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4952      	ldr	r1, [pc, #328]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	e03a      	b.n	800188a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181c:	4b4f      	ldr	r3, [pc, #316]	; (800195c <HAL_RCC_OscConfig+0x2b0>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff fc05 	bl	8001030 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182a:	f7ff fc01 	bl	8001030 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1a5      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4940      	ldr	r1, [pc, #256]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
 800185c:	e015      	b.n	800188a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_OscConfig+0x2b0>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fbe4 	bl	8001030 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186c:	f7ff fbe0 	bl	8001030 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e184      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d030      	beq.n	80018f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d016      	beq.n	80018cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_RCC_OscConfig+0x2b4>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff fbc4 	bl	8001030 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff fbc0 	bl	8001030 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e164      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x200>
 80018ca:	e015      	b.n	80018f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_RCC_OscConfig+0x2b4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fbad 	bl	8001030 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018da:	f7ff fba9 	bl	8001030 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e14d      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80a0 	beq.w	8001a46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10f      	bne.n	8001936 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001932:	2301      	movs	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x2b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d121      	bne.n	8001986 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_RCC_OscConfig+0x2b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_RCC_OscConfig+0x2b8>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194e:	f7ff fb6f 	bl	8001030 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	e011      	b.n	800197a <HAL_RCC_OscConfig+0x2ce>
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	42470000 	.word	0x42470000
 8001960:	42470e80 	.word	0x42470e80
 8001964:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001968:	f7ff fb62 	bl	8001030 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e106      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b85      	ldr	r3, [pc, #532]	; (8001b90 <HAL_RCC_OscConfig+0x4e4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d106      	bne.n	800199c <HAL_RCC_OscConfig+0x2f0>
 800198e:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a80      	ldr	r2, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
 800199a:	e01c      	b.n	80019d6 <HAL_RCC_OscConfig+0x32a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d10c      	bne.n	80019be <HAL_RCC_OscConfig+0x312>
 80019a4:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	4a7a      	ldr	r2, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6713      	str	r3, [r2, #112]	; 0x70
 80019b0:	4b78      	ldr	r3, [pc, #480]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	4a77      	ldr	r2, [pc, #476]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70
 80019bc:	e00b      	b.n	80019d6 <HAL_RCC_OscConfig+0x32a>
 80019be:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	4a74      	ldr	r2, [pc, #464]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 80019d0:	f023 0304 	bic.w	r3, r3, #4
 80019d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d015      	beq.n	8001a0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff fb27 	bl	8001030 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7ff fb23 	bl	8001030 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e0c5      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ee      	beq.n	80019e6 <HAL_RCC_OscConfig+0x33a>
 8001a08:	e014      	b.n	8001a34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb11 	bl	8001030 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fb0d 	bl	8001030 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0af      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1ee      	bne.n	8001a12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d105      	bne.n	8001a46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3a:	4b56      	ldr	r3, [pc, #344]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a55      	ldr	r2, [pc, #340]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 809b 	beq.w	8001b86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a50:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d05c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d141      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a64:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_RCC_OscConfig+0x4ec>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fae1 	bl	8001030 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff fadd 	bl	8001030 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e081      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	019b      	lsls	r3, r3, #6
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	061b      	lsls	r3, r3, #24
 8001ab4:	4937      	ldr	r1, [pc, #220]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_RCC_OscConfig+0x4ec>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fab6 	bl	8001030 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff fab2 	bl	8001030 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e056      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x41c>
 8001ae6:	e04e      	b.n	8001b86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_OscConfig+0x4ec>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fa9f 	bl	8001030 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff fa9b 	bl	8001030 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e03f      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x44a>
 8001b14:	e037      	b.n	8001b86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e032      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_RCC_OscConfig+0x4e8>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d028      	beq.n	8001b82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d121      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d11a      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b52:	4013      	ands	r3, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d111      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	085b      	lsrs	r3, r3, #1
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40007000 	.word	0x40007000
 8001b94:	40023800 	.word	0x40023800
 8001b98:	42470060 	.word	0x42470060

08001b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0cc      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d90c      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0b8      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf0:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c14:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	494d      	ldr	r1, [pc, #308]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d044      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d119      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e07f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e06f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e067      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4934      	ldr	r1, [pc, #208]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7ff f9d0 	bl	8001030 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7ff f9cc 	bl	8001030 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e04f      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d20c      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e032      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4916      	ldr	r1, [pc, #88]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d22:	f000 f821 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d26:	4602      	mov	r2, r0
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	490a      	ldr	r1, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	5ccb      	ldrb	r3, [r1, r3]
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f930 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	08003098 	.word	0x08003098
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d80:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d00d      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x40>
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	f200 80bd 	bhi.w	8001f0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x34>
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d9a:	e0b7      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b61      	ldr	r3, [pc, #388]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d9e:	60bb      	str	r3, [r7, #8]
       break;
 8001da0:	e0b7      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001da2:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001da4:	60bb      	str	r3, [r7, #8]
      break;
 8001da6:	e0b4      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da8:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db2:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d04d      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbe:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	ea02 0800 	and.w	r8, r2, r0
 8001dd6:	ea03 0901 	and.w	r9, r3, r1
 8001dda:	4640      	mov	r0, r8
 8001ddc:	4649      	mov	r1, r9
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	014b      	lsls	r3, r1, #5
 8001de8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dec:	0142      	lsls	r2, r0, #5
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	ebb0 0008 	subs.w	r0, r0, r8
 8001df6:	eb61 0109 	sbc.w	r1, r1, r9
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	018b      	lsls	r3, r1, #6
 8001e04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e08:	0182      	lsls	r2, r0, #6
 8001e0a:	1a12      	subs	r2, r2, r0
 8001e0c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e10:	f04f 0000 	mov.w	r0, #0
 8001e14:	f04f 0100 	mov.w	r1, #0
 8001e18:	00d9      	lsls	r1, r3, #3
 8001e1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e1e:	00d0      	lsls	r0, r2, #3
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	eb12 0208 	adds.w	r2, r2, r8
 8001e28:	eb43 0309 	adc.w	r3, r3, r9
 8001e2c:	f04f 0000 	mov.w	r0, #0
 8001e30:	f04f 0100 	mov.w	r1, #0
 8001e34:	0259      	lsls	r1, r3, #9
 8001e36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e3a:	0250      	lsls	r0, r2, #9
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	461a      	mov	r2, r3
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	f7fe fa20 	bl	8000290 <__aeabi_uldivmod>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4613      	mov	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	e04a      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	461a      	mov	r2, r3
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	ea02 0400 	and.w	r4, r2, r0
 8001e72:	ea03 0501 	and.w	r5, r3, r1
 8001e76:	4620      	mov	r0, r4
 8001e78:	4629      	mov	r1, r5
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	014b      	lsls	r3, r1, #5
 8001e84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e88:	0142      	lsls	r2, r0, #5
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	1b00      	subs	r0, r0, r4
 8001e90:	eb61 0105 	sbc.w	r1, r1, r5
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	018b      	lsls	r3, r1, #6
 8001e9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ea2:	0182      	lsls	r2, r0, #6
 8001ea4:	1a12      	subs	r2, r2, r0
 8001ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	00d9      	lsls	r1, r3, #3
 8001eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eb8:	00d0      	lsls	r0, r2, #3
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	1912      	adds	r2, r2, r4
 8001ec0:	eb45 0303 	adc.w	r3, r5, r3
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	0299      	lsls	r1, r3, #10
 8001ece:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ed2:	0290      	lsls	r0, r2, #10
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	f7fe f9d4 	bl	8000290 <__aeabi_uldivmod>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4613      	mov	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	3301      	adds	r3, #1
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	60bb      	str	r3, [r7, #8]
      break;
 8001f0a:	e002      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f0e:	60bb      	str	r3, [r7, #8]
      break;
 8001f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f12:	68bb      	ldr	r3, [r7, #8]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	007a1200 	.word	0x007a1200

08001f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000

08001f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f48:	f7ff fff0 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	0a9b      	lsrs	r3, r3, #10
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	4903      	ldr	r1, [pc, #12]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800
 8001f68:	080030a8 	.word	0x080030a8

08001f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f70:	f7ff ffdc 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	0b5b      	lsrs	r3, r3, #13
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	4903      	ldr	r1, [pc, #12]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f82:	5ccb      	ldrb	r3, [r1, r3]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	080030a8 	.word	0x080030a8

08001f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e03f      	b.n	8002026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fe76 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2224      	movs	r2, #36	; 0x24
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f9cb 	bl	8002374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800200c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b08a      	sub	sp, #40	; 0x28
 8002032:	af02      	add	r7, sp, #8
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4613      	mov	r3, r2
 800203c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b20      	cmp	r3, #32
 800204c:	d17c      	bne.n	8002148 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_UART_Transmit+0x2c>
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e075      	b.n	800214a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_UART_Transmit+0x3e>
 8002068:	2302      	movs	r3, #2
 800206a:	e06e      	b.n	800214a <HAL_UART_Transmit+0x11c>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2221      	movs	r2, #33	; 0x21
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002082:	f7fe ffd5 	bl	8001030 <HAL_GetTick>
 8002086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209c:	d108      	bne.n	80020b0 <HAL_UART_Transmit+0x82>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d104      	bne.n	80020b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	e003      	b.n	80020b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020c0:	e02a      	b.n	8002118 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2200      	movs	r2, #0
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f8e2 	bl	8002296 <UART_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e036      	b.n	800214a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10b      	bne.n	80020fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	3302      	adds	r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	e007      	b.n	800210a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3301      	adds	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1cf      	bne.n	80020c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2200      	movs	r2, #0
 800212a:	2140      	movs	r1, #64	; 0x40
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f8b2 	bl	8002296 <UART_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e006      	b.n	800214a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b08a      	sub	sp, #40	; 0x28
 8002156:	af02      	add	r7, sp, #8
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b20      	cmp	r3, #32
 8002170:	f040 808c 	bne.w	800228c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_UART_Receive+0x2e>
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e084      	b.n	800228e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_UART_Receive+0x40>
 800218e:	2302      	movs	r3, #2
 8002190:	e07d      	b.n	800228e <HAL_UART_Receive+0x13c>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2222      	movs	r2, #34	; 0x22
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ae:	f7fe ff3f 	bl	8001030 <HAL_GetTick>
 80021b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c8:	d108      	bne.n	80021dc <HAL_UART_Receive+0x8a>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d104      	bne.n	80021dc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	e003      	b.n	80021e4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021ec:	e043      	b.n	8002276 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2200      	movs	r2, #0
 80021f6:	2120      	movs	r1, #32
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f84c 	bl	8002296 <UART_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e042      	b.n	800228e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	b29b      	uxth	r3, r3
 8002216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221a:	b29a      	uxth	r2, r3
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	3302      	adds	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	e01f      	b.n	8002268 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002230:	d007      	beq.n	8002242 <HAL_UART_Receive+0xf0>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10a      	bne.n	8002250 <HAL_UART_Receive+0xfe>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e008      	b.n	8002262 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800225c:	b2da      	uxtb	r2, r3
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3301      	adds	r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1b6      	bne.n	80021ee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b090      	sub	sp, #64	; 0x40
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a6:	e050      	b.n	800234a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ae:	d04c      	beq.n	800234a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80022b6:	f7fe febb 	bl	8001030 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d241      	bcs.n	800234a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	330c      	adds	r3, #12
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	e853 3f00 	ldrex	r3, [r3]
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	330c      	adds	r3, #12
 80022e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022e6:	637a      	str	r2, [r7, #52]	; 0x34
 80022e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e5      	bne.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3314      	adds	r3, #20
 8002300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	e853 3f00 	ldrex	r3, [r3]
 8002308:	613b      	str	r3, [r7, #16]
   return(result);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	63bb      	str	r3, [r7, #56]	; 0x38
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	3314      	adds	r3, #20
 8002318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800231a:	623a      	str	r2, [r7, #32]
 800231c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231e:	69f9      	ldr	r1, [r7, #28]
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	e841 2300 	strex	r3, r2, [r1]
 8002326:	61bb      	str	r3, [r7, #24]
   return(result);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1e5      	bne.n	80022fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e00f      	b.n	800236a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4013      	ands	r3, r2
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	429a      	cmp	r2, r3
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	429a      	cmp	r2, r3
 8002366:	d09f      	beq.n	80022a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3740      	adds	r7, #64	; 0x40
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002378:	b09f      	sub	sp, #124	; 0x7c
 800237a:	af00      	add	r7, sp, #0
 800237c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800237e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238a:	68d9      	ldr	r1, [r3, #12]
 800238c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	ea40 0301 	orr.w	r3, r0, r1
 8002394:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	431a      	orrs	r2, r3
 80023a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80023ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023b8:	f021 010c 	bic.w	r1, r1, #12
 80023bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023c2:	430b      	orrs	r3, r1
 80023c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d2:	6999      	ldr	r1, [r3, #24]
 80023d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	ea40 0301 	orr.w	r3, r0, r1
 80023dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4bc5      	ldr	r3, [pc, #788]	; (80026f8 <UART_SetConfig+0x384>)
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d004      	beq.n	80023f2 <UART_SetConfig+0x7e>
 80023e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4bc3      	ldr	r3, [pc, #780]	; (80026fc <UART_SetConfig+0x388>)
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d103      	bne.n	80023fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023f2:	f7ff fdbb 	bl	8001f6c <HAL_RCC_GetPCLK2Freq>
 80023f6:	6778      	str	r0, [r7, #116]	; 0x74
 80023f8:	e002      	b.n	8002400 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023fa:	f7ff fda3 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 80023fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002408:	f040 80b6 	bne.w	8002578 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800240c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240e:	461c      	mov	r4, r3
 8002410:	f04f 0500 	mov.w	r5, #0
 8002414:	4622      	mov	r2, r4
 8002416:	462b      	mov	r3, r5
 8002418:	1891      	adds	r1, r2, r2
 800241a:	6439      	str	r1, [r7, #64]	; 0x40
 800241c:	415b      	adcs	r3, r3
 800241e:	647b      	str	r3, [r7, #68]	; 0x44
 8002420:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002424:	1912      	adds	r2, r2, r4
 8002426:	eb45 0303 	adc.w	r3, r5, r3
 800242a:	f04f 0000 	mov.w	r0, #0
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	00d9      	lsls	r1, r3, #3
 8002434:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002438:	00d0      	lsls	r0, r2, #3
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	1911      	adds	r1, r2, r4
 8002440:	6639      	str	r1, [r7, #96]	; 0x60
 8002442:	416b      	adcs	r3, r5
 8002444:	667b      	str	r3, [r7, #100]	; 0x64
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	461a      	mov	r2, r3
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	1891      	adds	r1, r2, r2
 8002452:	63b9      	str	r1, [r7, #56]	; 0x38
 8002454:	415b      	adcs	r3, r3
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800245c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002460:	f7fd ff16 	bl	8000290 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4ba5      	ldr	r3, [pc, #660]	; (8002700 <UART_SetConfig+0x38c>)
 800246a:	fba3 2302 	umull	r2, r3, r3, r2
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	011e      	lsls	r6, r3, #4
 8002472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002474:	461c      	mov	r4, r3
 8002476:	f04f 0500 	mov.w	r5, #0
 800247a:	4622      	mov	r2, r4
 800247c:	462b      	mov	r3, r5
 800247e:	1891      	adds	r1, r2, r2
 8002480:	6339      	str	r1, [r7, #48]	; 0x30
 8002482:	415b      	adcs	r3, r3
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
 8002486:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800248a:	1912      	adds	r2, r2, r4
 800248c:	eb45 0303 	adc.w	r3, r5, r3
 8002490:	f04f 0000 	mov.w	r0, #0
 8002494:	f04f 0100 	mov.w	r1, #0
 8002498:	00d9      	lsls	r1, r3, #3
 800249a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800249e:	00d0      	lsls	r0, r2, #3
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	1911      	adds	r1, r2, r4
 80024a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80024a8:	416b      	adcs	r3, r5
 80024aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	461a      	mov	r2, r3
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	1891      	adds	r1, r2, r2
 80024b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80024ba:	415b      	adcs	r3, r3
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80024c6:	f7fd fee3 	bl	8000290 <__aeabi_uldivmod>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4b8c      	ldr	r3, [pc, #560]	; (8002700 <UART_SetConfig+0x38c>)
 80024d0:	fba3 1302 	umull	r1, r3, r3, r2
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	2164      	movs	r1, #100	; 0x64
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	3332      	adds	r3, #50	; 0x32
 80024e2:	4a87      	ldr	r2, [pc, #540]	; (8002700 <UART_SetConfig+0x38c>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024f0:	441e      	add	r6, r3
 80024f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f4:	4618      	mov	r0, r3
 80024f6:	f04f 0100 	mov.w	r1, #0
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	1894      	adds	r4, r2, r2
 8002500:	623c      	str	r4, [r7, #32]
 8002502:	415b      	adcs	r3, r3
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
 8002506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800250a:	1812      	adds	r2, r2, r0
 800250c:	eb41 0303 	adc.w	r3, r1, r3
 8002510:	f04f 0400 	mov.w	r4, #0
 8002514:	f04f 0500 	mov.w	r5, #0
 8002518:	00dd      	lsls	r5, r3, #3
 800251a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800251e:	00d4      	lsls	r4, r2, #3
 8002520:	4622      	mov	r2, r4
 8002522:	462b      	mov	r3, r5
 8002524:	1814      	adds	r4, r2, r0
 8002526:	653c      	str	r4, [r7, #80]	; 0x50
 8002528:	414b      	adcs	r3, r1
 800252a:	657b      	str	r3, [r7, #84]	; 0x54
 800252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	461a      	mov	r2, r3
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	1891      	adds	r1, r2, r2
 8002538:	61b9      	str	r1, [r7, #24]
 800253a:	415b      	adcs	r3, r3
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002542:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002546:	f7fd fea3 	bl	8000290 <__aeabi_uldivmod>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <UART_SetConfig+0x38c>)
 8002550:	fba3 1302 	umull	r1, r3, r3, r2
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	2164      	movs	r1, #100	; 0x64
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	3332      	adds	r3, #50	; 0x32
 8002562:	4a67      	ldr	r2, [pc, #412]	; (8002700 <UART_SetConfig+0x38c>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	f003 0207 	and.w	r2, r3, #7
 800256e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4432      	add	r2, r6
 8002574:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002576:	e0b9      	b.n	80026ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257a:	461c      	mov	r4, r3
 800257c:	f04f 0500 	mov.w	r5, #0
 8002580:	4622      	mov	r2, r4
 8002582:	462b      	mov	r3, r5
 8002584:	1891      	adds	r1, r2, r2
 8002586:	6139      	str	r1, [r7, #16]
 8002588:	415b      	adcs	r3, r3
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002590:	1912      	adds	r2, r2, r4
 8002592:	eb45 0303 	adc.w	r3, r5, r3
 8002596:	f04f 0000 	mov.w	r0, #0
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	00d9      	lsls	r1, r3, #3
 80025a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025a4:	00d0      	lsls	r0, r2, #3
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	eb12 0804 	adds.w	r8, r2, r4
 80025ae:	eb43 0905 	adc.w	r9, r3, r5
 80025b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f04f 0100 	mov.w	r1, #0
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	008b      	lsls	r3, r1, #2
 80025c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025ca:	0082      	lsls	r2, r0, #2
 80025cc:	4640      	mov	r0, r8
 80025ce:	4649      	mov	r1, r9
 80025d0:	f7fd fe5e 	bl	8000290 <__aeabi_uldivmod>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4b49      	ldr	r3, [pc, #292]	; (8002700 <UART_SetConfig+0x38c>)
 80025da:	fba3 2302 	umull	r2, r3, r3, r2
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	011e      	lsls	r6, r3, #4
 80025e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e4:	4618      	mov	r0, r3
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	1894      	adds	r4, r2, r2
 80025f0:	60bc      	str	r4, [r7, #8]
 80025f2:	415b      	adcs	r3, r3
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025fa:	1812      	adds	r2, r2, r0
 80025fc:	eb41 0303 	adc.w	r3, r1, r3
 8002600:	f04f 0400 	mov.w	r4, #0
 8002604:	f04f 0500 	mov.w	r5, #0
 8002608:	00dd      	lsls	r5, r3, #3
 800260a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800260e:	00d4      	lsls	r4, r2, #3
 8002610:	4622      	mov	r2, r4
 8002612:	462b      	mov	r3, r5
 8002614:	1814      	adds	r4, r2, r0
 8002616:	64bc      	str	r4, [r7, #72]	; 0x48
 8002618:	414b      	adcs	r3, r1
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4618      	mov	r0, r3
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	008b      	lsls	r3, r1, #2
 8002630:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002634:	0082      	lsls	r2, r0, #2
 8002636:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800263a:	f7fd fe29 	bl	8000290 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <UART_SetConfig+0x38c>)
 8002644:	fba3 1302 	umull	r1, r3, r3, r2
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	2164      	movs	r1, #100	; 0x64
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	3332      	adds	r3, #50	; 0x32
 8002656:	4a2a      	ldr	r2, [pc, #168]	; (8002700 <UART_SetConfig+0x38c>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002662:	441e      	add	r6, r3
 8002664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002666:	4618      	mov	r0, r3
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	1894      	adds	r4, r2, r2
 8002672:	603c      	str	r4, [r7, #0]
 8002674:	415b      	adcs	r3, r3
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800267c:	1812      	adds	r2, r2, r0
 800267e:	eb41 0303 	adc.w	r3, r1, r3
 8002682:	f04f 0400 	mov.w	r4, #0
 8002686:	f04f 0500 	mov.w	r5, #0
 800268a:	00dd      	lsls	r5, r3, #3
 800268c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002690:	00d4      	lsls	r4, r2, #3
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	eb12 0a00 	adds.w	sl, r2, r0
 800269a:	eb43 0b01 	adc.w	fp, r3, r1
 800269e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f04f 0100 	mov.w	r1, #0
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	008b      	lsls	r3, r1, #2
 80026b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026b6:	0082      	lsls	r2, r0, #2
 80026b8:	4650      	mov	r0, sl
 80026ba:	4659      	mov	r1, fp
 80026bc:	f7fd fde8 	bl	8000290 <__aeabi_uldivmod>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <UART_SetConfig+0x38c>)
 80026c6:	fba3 1302 	umull	r1, r3, r3, r2
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2164      	movs	r1, #100	; 0x64
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	3332      	adds	r3, #50	; 0x32
 80026d8:	4a09      	ldr	r2, [pc, #36]	; (8002700 <UART_SetConfig+0x38c>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	f003 020f 	and.w	r2, r3, #15
 80026e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4432      	add	r2, r6
 80026ea:	609a      	str	r2, [r3, #8]
}
 80026ec:	bf00      	nop
 80026ee:	377c      	adds	r7, #124	; 0x7c
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026f6:	bf00      	nop
 80026f8:	40011000 	.word	0x40011000
 80026fc:	40011400 	.word	0x40011400
 8002700:	51eb851f 	.word	0x51eb851f

08002704 <__errno>:
 8002704:	4b01      	ldr	r3, [pc, #4]	; (800270c <__errno+0x8>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	2000000c 	.word	0x2000000c

08002710 <__libc_init_array>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	4d0d      	ldr	r5, [pc, #52]	; (8002748 <__libc_init_array+0x38>)
 8002714:	4c0d      	ldr	r4, [pc, #52]	; (800274c <__libc_init_array+0x3c>)
 8002716:	1b64      	subs	r4, r4, r5
 8002718:	10a4      	asrs	r4, r4, #2
 800271a:	2600      	movs	r6, #0
 800271c:	42a6      	cmp	r6, r4
 800271e:	d109      	bne.n	8002734 <__libc_init_array+0x24>
 8002720:	4d0b      	ldr	r5, [pc, #44]	; (8002750 <__libc_init_array+0x40>)
 8002722:	4c0c      	ldr	r4, [pc, #48]	; (8002754 <__libc_init_array+0x44>)
 8002724:	f000 fc4e 	bl	8002fc4 <_init>
 8002728:	1b64      	subs	r4, r4, r5
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	2600      	movs	r6, #0
 800272e:	42a6      	cmp	r6, r4
 8002730:	d105      	bne.n	800273e <__libc_init_array+0x2e>
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	f855 3b04 	ldr.w	r3, [r5], #4
 8002738:	4798      	blx	r3
 800273a:	3601      	adds	r6, #1
 800273c:	e7ee      	b.n	800271c <__libc_init_array+0xc>
 800273e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002742:	4798      	blx	r3
 8002744:	3601      	adds	r6, #1
 8002746:	e7f2      	b.n	800272e <__libc_init_array+0x1e>
 8002748:	080030ec 	.word	0x080030ec
 800274c:	080030ec 	.word	0x080030ec
 8002750:	080030ec 	.word	0x080030ec
 8002754:	080030f0 	.word	0x080030f0

08002758 <memset>:
 8002758:	4402      	add	r2, r0
 800275a:	4603      	mov	r3, r0
 800275c:	4293      	cmp	r3, r2
 800275e:	d100      	bne.n	8002762 <memset+0xa>
 8002760:	4770      	bx	lr
 8002762:	f803 1b01 	strb.w	r1, [r3], #1
 8002766:	e7f9      	b.n	800275c <memset+0x4>

08002768 <_vsiprintf_r>:
 8002768:	b500      	push	{lr}
 800276a:	b09b      	sub	sp, #108	; 0x6c
 800276c:	9100      	str	r1, [sp, #0]
 800276e:	9104      	str	r1, [sp, #16]
 8002770:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002774:	9105      	str	r1, [sp, #20]
 8002776:	9102      	str	r1, [sp, #8]
 8002778:	4905      	ldr	r1, [pc, #20]	; (8002790 <_vsiprintf_r+0x28>)
 800277a:	9103      	str	r1, [sp, #12]
 800277c:	4669      	mov	r1, sp
 800277e:	f000 f86f 	bl	8002860 <_svfiprintf_r>
 8002782:	9b00      	ldr	r3, [sp, #0]
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	b01b      	add	sp, #108	; 0x6c
 800278a:	f85d fb04 	ldr.w	pc, [sp], #4
 800278e:	bf00      	nop
 8002790:	ffff0208 	.word	0xffff0208

08002794 <vsiprintf>:
 8002794:	4613      	mov	r3, r2
 8002796:	460a      	mov	r2, r1
 8002798:	4601      	mov	r1, r0
 800279a:	4802      	ldr	r0, [pc, #8]	; (80027a4 <vsiprintf+0x10>)
 800279c:	6800      	ldr	r0, [r0, #0]
 800279e:	f7ff bfe3 	b.w	8002768 <_vsiprintf_r>
 80027a2:	bf00      	nop
 80027a4:	2000000c 	.word	0x2000000c

080027a8 <__ssputs_r>:
 80027a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ac:	688e      	ldr	r6, [r1, #8]
 80027ae:	429e      	cmp	r6, r3
 80027b0:	4682      	mov	sl, r0
 80027b2:	460c      	mov	r4, r1
 80027b4:	4690      	mov	r8, r2
 80027b6:	461f      	mov	r7, r3
 80027b8:	d838      	bhi.n	800282c <__ssputs_r+0x84>
 80027ba:	898a      	ldrh	r2, [r1, #12]
 80027bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027c0:	d032      	beq.n	8002828 <__ssputs_r+0x80>
 80027c2:	6825      	ldr	r5, [r4, #0]
 80027c4:	6909      	ldr	r1, [r1, #16]
 80027c6:	eba5 0901 	sub.w	r9, r5, r1
 80027ca:	6965      	ldr	r5, [r4, #20]
 80027cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027d4:	3301      	adds	r3, #1
 80027d6:	444b      	add	r3, r9
 80027d8:	106d      	asrs	r5, r5, #1
 80027da:	429d      	cmp	r5, r3
 80027dc:	bf38      	it	cc
 80027de:	461d      	movcc	r5, r3
 80027e0:	0553      	lsls	r3, r2, #21
 80027e2:	d531      	bpl.n	8002848 <__ssputs_r+0xa0>
 80027e4:	4629      	mov	r1, r5
 80027e6:	f000 fb47 	bl	8002e78 <_malloc_r>
 80027ea:	4606      	mov	r6, r0
 80027ec:	b950      	cbnz	r0, 8002804 <__ssputs_r+0x5c>
 80027ee:	230c      	movs	r3, #12
 80027f0:	f8ca 3000 	str.w	r3, [sl]
 80027f4:	89a3      	ldrh	r3, [r4, #12]
 80027f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027fa:	81a3      	strh	r3, [r4, #12]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002804:	6921      	ldr	r1, [r4, #16]
 8002806:	464a      	mov	r2, r9
 8002808:	f000 fabe 	bl	8002d88 <memcpy>
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002816:	81a3      	strh	r3, [r4, #12]
 8002818:	6126      	str	r6, [r4, #16]
 800281a:	6165      	str	r5, [r4, #20]
 800281c:	444e      	add	r6, r9
 800281e:	eba5 0509 	sub.w	r5, r5, r9
 8002822:	6026      	str	r6, [r4, #0]
 8002824:	60a5      	str	r5, [r4, #8]
 8002826:	463e      	mov	r6, r7
 8002828:	42be      	cmp	r6, r7
 800282a:	d900      	bls.n	800282e <__ssputs_r+0x86>
 800282c:	463e      	mov	r6, r7
 800282e:	4632      	mov	r2, r6
 8002830:	6820      	ldr	r0, [r4, #0]
 8002832:	4641      	mov	r1, r8
 8002834:	f000 fab6 	bl	8002da4 <memmove>
 8002838:	68a3      	ldr	r3, [r4, #8]
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	1b9b      	subs	r3, r3, r6
 800283e:	4432      	add	r2, r6
 8002840:	60a3      	str	r3, [r4, #8]
 8002842:	6022      	str	r2, [r4, #0]
 8002844:	2000      	movs	r0, #0
 8002846:	e7db      	b.n	8002800 <__ssputs_r+0x58>
 8002848:	462a      	mov	r2, r5
 800284a:	f000 fb6f 	bl	8002f2c <_realloc_r>
 800284e:	4606      	mov	r6, r0
 8002850:	2800      	cmp	r0, #0
 8002852:	d1e1      	bne.n	8002818 <__ssputs_r+0x70>
 8002854:	6921      	ldr	r1, [r4, #16]
 8002856:	4650      	mov	r0, sl
 8002858:	f000 fabe 	bl	8002dd8 <_free_r>
 800285c:	e7c7      	b.n	80027ee <__ssputs_r+0x46>
	...

08002860 <_svfiprintf_r>:
 8002860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002864:	4698      	mov	r8, r3
 8002866:	898b      	ldrh	r3, [r1, #12]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	b09d      	sub	sp, #116	; 0x74
 800286c:	4607      	mov	r7, r0
 800286e:	460d      	mov	r5, r1
 8002870:	4614      	mov	r4, r2
 8002872:	d50e      	bpl.n	8002892 <_svfiprintf_r+0x32>
 8002874:	690b      	ldr	r3, [r1, #16]
 8002876:	b963      	cbnz	r3, 8002892 <_svfiprintf_r+0x32>
 8002878:	2140      	movs	r1, #64	; 0x40
 800287a:	f000 fafd 	bl	8002e78 <_malloc_r>
 800287e:	6028      	str	r0, [r5, #0]
 8002880:	6128      	str	r0, [r5, #16]
 8002882:	b920      	cbnz	r0, 800288e <_svfiprintf_r+0x2e>
 8002884:	230c      	movs	r3, #12
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	e0d1      	b.n	8002a32 <_svfiprintf_r+0x1d2>
 800288e:	2340      	movs	r3, #64	; 0x40
 8002890:	616b      	str	r3, [r5, #20]
 8002892:	2300      	movs	r3, #0
 8002894:	9309      	str	r3, [sp, #36]	; 0x24
 8002896:	2320      	movs	r3, #32
 8002898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800289c:	f8cd 800c 	str.w	r8, [sp, #12]
 80028a0:	2330      	movs	r3, #48	; 0x30
 80028a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002a4c <_svfiprintf_r+0x1ec>
 80028a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028aa:	f04f 0901 	mov.w	r9, #1
 80028ae:	4623      	mov	r3, r4
 80028b0:	469a      	mov	sl, r3
 80028b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028b6:	b10a      	cbz	r2, 80028bc <_svfiprintf_r+0x5c>
 80028b8:	2a25      	cmp	r2, #37	; 0x25
 80028ba:	d1f9      	bne.n	80028b0 <_svfiprintf_r+0x50>
 80028bc:	ebba 0b04 	subs.w	fp, sl, r4
 80028c0:	d00b      	beq.n	80028da <_svfiprintf_r+0x7a>
 80028c2:	465b      	mov	r3, fp
 80028c4:	4622      	mov	r2, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	4638      	mov	r0, r7
 80028ca:	f7ff ff6d 	bl	80027a8 <__ssputs_r>
 80028ce:	3001      	adds	r0, #1
 80028d0:	f000 80aa 	beq.w	8002a28 <_svfiprintf_r+0x1c8>
 80028d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028d6:	445a      	add	r2, fp
 80028d8:	9209      	str	r2, [sp, #36]	; 0x24
 80028da:	f89a 3000 	ldrb.w	r3, [sl]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80a2 	beq.w	8002a28 <_svfiprintf_r+0x1c8>
 80028e4:	2300      	movs	r3, #0
 80028e6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028ee:	f10a 0a01 	add.w	sl, sl, #1
 80028f2:	9304      	str	r3, [sp, #16]
 80028f4:	9307      	str	r3, [sp, #28]
 80028f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028fa:	931a      	str	r3, [sp, #104]	; 0x68
 80028fc:	4654      	mov	r4, sl
 80028fe:	2205      	movs	r2, #5
 8002900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002904:	4851      	ldr	r0, [pc, #324]	; (8002a4c <_svfiprintf_r+0x1ec>)
 8002906:	f7fd fc73 	bl	80001f0 <memchr>
 800290a:	9a04      	ldr	r2, [sp, #16]
 800290c:	b9d8      	cbnz	r0, 8002946 <_svfiprintf_r+0xe6>
 800290e:	06d0      	lsls	r0, r2, #27
 8002910:	bf44      	itt	mi
 8002912:	2320      	movmi	r3, #32
 8002914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002918:	0711      	lsls	r1, r2, #28
 800291a:	bf44      	itt	mi
 800291c:	232b      	movmi	r3, #43	; 0x2b
 800291e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002922:	f89a 3000 	ldrb.w	r3, [sl]
 8002926:	2b2a      	cmp	r3, #42	; 0x2a
 8002928:	d015      	beq.n	8002956 <_svfiprintf_r+0xf6>
 800292a:	9a07      	ldr	r2, [sp, #28]
 800292c:	4654      	mov	r4, sl
 800292e:	2000      	movs	r0, #0
 8002930:	f04f 0c0a 	mov.w	ip, #10
 8002934:	4621      	mov	r1, r4
 8002936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800293a:	3b30      	subs	r3, #48	; 0x30
 800293c:	2b09      	cmp	r3, #9
 800293e:	d94e      	bls.n	80029de <_svfiprintf_r+0x17e>
 8002940:	b1b0      	cbz	r0, 8002970 <_svfiprintf_r+0x110>
 8002942:	9207      	str	r2, [sp, #28]
 8002944:	e014      	b.n	8002970 <_svfiprintf_r+0x110>
 8002946:	eba0 0308 	sub.w	r3, r0, r8
 800294a:	fa09 f303 	lsl.w	r3, r9, r3
 800294e:	4313      	orrs	r3, r2
 8002950:	9304      	str	r3, [sp, #16]
 8002952:	46a2      	mov	sl, r4
 8002954:	e7d2      	b.n	80028fc <_svfiprintf_r+0x9c>
 8002956:	9b03      	ldr	r3, [sp, #12]
 8002958:	1d19      	adds	r1, r3, #4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	9103      	str	r1, [sp, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	bfbb      	ittet	lt
 8002962:	425b      	neglt	r3, r3
 8002964:	f042 0202 	orrlt.w	r2, r2, #2
 8002968:	9307      	strge	r3, [sp, #28]
 800296a:	9307      	strlt	r3, [sp, #28]
 800296c:	bfb8      	it	lt
 800296e:	9204      	strlt	r2, [sp, #16]
 8002970:	7823      	ldrb	r3, [r4, #0]
 8002972:	2b2e      	cmp	r3, #46	; 0x2e
 8002974:	d10c      	bne.n	8002990 <_svfiprintf_r+0x130>
 8002976:	7863      	ldrb	r3, [r4, #1]
 8002978:	2b2a      	cmp	r3, #42	; 0x2a
 800297a:	d135      	bne.n	80029e8 <_svfiprintf_r+0x188>
 800297c:	9b03      	ldr	r3, [sp, #12]
 800297e:	1d1a      	adds	r2, r3, #4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	9203      	str	r2, [sp, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	bfb8      	it	lt
 8002988:	f04f 33ff 	movlt.w	r3, #4294967295
 800298c:	3402      	adds	r4, #2
 800298e:	9305      	str	r3, [sp, #20]
 8002990:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002a5c <_svfiprintf_r+0x1fc>
 8002994:	7821      	ldrb	r1, [r4, #0]
 8002996:	2203      	movs	r2, #3
 8002998:	4650      	mov	r0, sl
 800299a:	f7fd fc29 	bl	80001f0 <memchr>
 800299e:	b140      	cbz	r0, 80029b2 <_svfiprintf_r+0x152>
 80029a0:	2340      	movs	r3, #64	; 0x40
 80029a2:	eba0 000a 	sub.w	r0, r0, sl
 80029a6:	fa03 f000 	lsl.w	r0, r3, r0
 80029aa:	9b04      	ldr	r3, [sp, #16]
 80029ac:	4303      	orrs	r3, r0
 80029ae:	3401      	adds	r4, #1
 80029b0:	9304      	str	r3, [sp, #16]
 80029b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b6:	4826      	ldr	r0, [pc, #152]	; (8002a50 <_svfiprintf_r+0x1f0>)
 80029b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029bc:	2206      	movs	r2, #6
 80029be:	f7fd fc17 	bl	80001f0 <memchr>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d038      	beq.n	8002a38 <_svfiprintf_r+0x1d8>
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <_svfiprintf_r+0x1f4>)
 80029c8:	bb1b      	cbnz	r3, 8002a12 <_svfiprintf_r+0x1b2>
 80029ca:	9b03      	ldr	r3, [sp, #12]
 80029cc:	3307      	adds	r3, #7
 80029ce:	f023 0307 	bic.w	r3, r3, #7
 80029d2:	3308      	adds	r3, #8
 80029d4:	9303      	str	r3, [sp, #12]
 80029d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d8:	4433      	add	r3, r6
 80029da:	9309      	str	r3, [sp, #36]	; 0x24
 80029dc:	e767      	b.n	80028ae <_svfiprintf_r+0x4e>
 80029de:	fb0c 3202 	mla	r2, ip, r2, r3
 80029e2:	460c      	mov	r4, r1
 80029e4:	2001      	movs	r0, #1
 80029e6:	e7a5      	b.n	8002934 <_svfiprintf_r+0xd4>
 80029e8:	2300      	movs	r3, #0
 80029ea:	3401      	adds	r4, #1
 80029ec:	9305      	str	r3, [sp, #20]
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 0c0a 	mov.w	ip, #10
 80029f4:	4620      	mov	r0, r4
 80029f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029fa:	3a30      	subs	r2, #48	; 0x30
 80029fc:	2a09      	cmp	r2, #9
 80029fe:	d903      	bls.n	8002a08 <_svfiprintf_r+0x1a8>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0c5      	beq.n	8002990 <_svfiprintf_r+0x130>
 8002a04:	9105      	str	r1, [sp, #20]
 8002a06:	e7c3      	b.n	8002990 <_svfiprintf_r+0x130>
 8002a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e7f0      	b.n	80029f4 <_svfiprintf_r+0x194>
 8002a12:	ab03      	add	r3, sp, #12
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	462a      	mov	r2, r5
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <_svfiprintf_r+0x1f8>)
 8002a1a:	a904      	add	r1, sp, #16
 8002a1c:	4638      	mov	r0, r7
 8002a1e:	f3af 8000 	nop.w
 8002a22:	1c42      	adds	r2, r0, #1
 8002a24:	4606      	mov	r6, r0
 8002a26:	d1d6      	bne.n	80029d6 <_svfiprintf_r+0x176>
 8002a28:	89ab      	ldrh	r3, [r5, #12]
 8002a2a:	065b      	lsls	r3, r3, #25
 8002a2c:	f53f af2c 	bmi.w	8002888 <_svfiprintf_r+0x28>
 8002a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a32:	b01d      	add	sp, #116	; 0x74
 8002a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a38:	ab03      	add	r3, sp, #12
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	462a      	mov	r2, r5
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <_svfiprintf_r+0x1f8>)
 8002a40:	a904      	add	r1, sp, #16
 8002a42:	4638      	mov	r0, r7
 8002a44:	f000 f87a 	bl	8002b3c <_printf_i>
 8002a48:	e7eb      	b.n	8002a22 <_svfiprintf_r+0x1c2>
 8002a4a:	bf00      	nop
 8002a4c:	080030b0 	.word	0x080030b0
 8002a50:	080030ba 	.word	0x080030ba
 8002a54:	00000000 	.word	0x00000000
 8002a58:	080027a9 	.word	0x080027a9
 8002a5c:	080030b6 	.word	0x080030b6

08002a60 <_printf_common>:
 8002a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a64:	4616      	mov	r6, r2
 8002a66:	4699      	mov	r9, r3
 8002a68:	688a      	ldr	r2, [r1, #8]
 8002a6a:	690b      	ldr	r3, [r1, #16]
 8002a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bfb8      	it	lt
 8002a74:	4613      	movlt	r3, r2
 8002a76:	6033      	str	r3, [r6, #0]
 8002a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a7c:	4607      	mov	r7, r0
 8002a7e:	460c      	mov	r4, r1
 8002a80:	b10a      	cbz	r2, 8002a86 <_printf_common+0x26>
 8002a82:	3301      	adds	r3, #1
 8002a84:	6033      	str	r3, [r6, #0]
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	0699      	lsls	r1, r3, #26
 8002a8a:	bf42      	ittt	mi
 8002a8c:	6833      	ldrmi	r3, [r6, #0]
 8002a8e:	3302      	addmi	r3, #2
 8002a90:	6033      	strmi	r3, [r6, #0]
 8002a92:	6825      	ldr	r5, [r4, #0]
 8002a94:	f015 0506 	ands.w	r5, r5, #6
 8002a98:	d106      	bne.n	8002aa8 <_printf_common+0x48>
 8002a9a:	f104 0a19 	add.w	sl, r4, #25
 8002a9e:	68e3      	ldr	r3, [r4, #12]
 8002aa0:	6832      	ldr	r2, [r6, #0]
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	42ab      	cmp	r3, r5
 8002aa6:	dc26      	bgt.n	8002af6 <_printf_common+0x96>
 8002aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002aac:	1e13      	subs	r3, r2, #0
 8002aae:	6822      	ldr	r2, [r4, #0]
 8002ab0:	bf18      	it	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	0692      	lsls	r2, r2, #26
 8002ab6:	d42b      	bmi.n	8002b10 <_printf_common+0xb0>
 8002ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002abc:	4649      	mov	r1, r9
 8002abe:	4638      	mov	r0, r7
 8002ac0:	47c0      	blx	r8
 8002ac2:	3001      	adds	r0, #1
 8002ac4:	d01e      	beq.n	8002b04 <_printf_common+0xa4>
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	68e5      	ldr	r5, [r4, #12]
 8002aca:	6832      	ldr	r2, [r6, #0]
 8002acc:	f003 0306 	and.w	r3, r3, #6
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	bf08      	it	eq
 8002ad4:	1aad      	subeq	r5, r5, r2
 8002ad6:	68a3      	ldr	r3, [r4, #8]
 8002ad8:	6922      	ldr	r2, [r4, #16]
 8002ada:	bf0c      	ite	eq
 8002adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ae0:	2500      	movne	r5, #0
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	bfc4      	itt	gt
 8002ae6:	1a9b      	subgt	r3, r3, r2
 8002ae8:	18ed      	addgt	r5, r5, r3
 8002aea:	2600      	movs	r6, #0
 8002aec:	341a      	adds	r4, #26
 8002aee:	42b5      	cmp	r5, r6
 8002af0:	d11a      	bne.n	8002b28 <_printf_common+0xc8>
 8002af2:	2000      	movs	r0, #0
 8002af4:	e008      	b.n	8002b08 <_printf_common+0xa8>
 8002af6:	2301      	movs	r3, #1
 8002af8:	4652      	mov	r2, sl
 8002afa:	4649      	mov	r1, r9
 8002afc:	4638      	mov	r0, r7
 8002afe:	47c0      	blx	r8
 8002b00:	3001      	adds	r0, #1
 8002b02:	d103      	bne.n	8002b0c <_printf_common+0xac>
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b0c:	3501      	adds	r5, #1
 8002b0e:	e7c6      	b.n	8002a9e <_printf_common+0x3e>
 8002b10:	18e1      	adds	r1, r4, r3
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	2030      	movs	r0, #48	; 0x30
 8002b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b1a:	4422      	add	r2, r4
 8002b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b24:	3302      	adds	r3, #2
 8002b26:	e7c7      	b.n	8002ab8 <_printf_common+0x58>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	4638      	mov	r0, r7
 8002b30:	47c0      	blx	r8
 8002b32:	3001      	adds	r0, #1
 8002b34:	d0e6      	beq.n	8002b04 <_printf_common+0xa4>
 8002b36:	3601      	adds	r6, #1
 8002b38:	e7d9      	b.n	8002aee <_printf_common+0x8e>
	...

08002b3c <_printf_i>:
 8002b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b40:	460c      	mov	r4, r1
 8002b42:	4691      	mov	r9, r2
 8002b44:	7e27      	ldrb	r7, [r4, #24]
 8002b46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b48:	2f78      	cmp	r7, #120	; 0x78
 8002b4a:	4680      	mov	r8, r0
 8002b4c:	469a      	mov	sl, r3
 8002b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b52:	d807      	bhi.n	8002b64 <_printf_i+0x28>
 8002b54:	2f62      	cmp	r7, #98	; 0x62
 8002b56:	d80a      	bhi.n	8002b6e <_printf_i+0x32>
 8002b58:	2f00      	cmp	r7, #0
 8002b5a:	f000 80d8 	beq.w	8002d0e <_printf_i+0x1d2>
 8002b5e:	2f58      	cmp	r7, #88	; 0x58
 8002b60:	f000 80a3 	beq.w	8002caa <_printf_i+0x16e>
 8002b64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b6c:	e03a      	b.n	8002be4 <_printf_i+0xa8>
 8002b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b72:	2b15      	cmp	r3, #21
 8002b74:	d8f6      	bhi.n	8002b64 <_printf_i+0x28>
 8002b76:	a001      	add	r0, pc, #4	; (adr r0, 8002b7c <_printf_i+0x40>)
 8002b78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002b7c:	08002bd5 	.word	0x08002bd5
 8002b80:	08002be9 	.word	0x08002be9
 8002b84:	08002b65 	.word	0x08002b65
 8002b88:	08002b65 	.word	0x08002b65
 8002b8c:	08002b65 	.word	0x08002b65
 8002b90:	08002b65 	.word	0x08002b65
 8002b94:	08002be9 	.word	0x08002be9
 8002b98:	08002b65 	.word	0x08002b65
 8002b9c:	08002b65 	.word	0x08002b65
 8002ba0:	08002b65 	.word	0x08002b65
 8002ba4:	08002b65 	.word	0x08002b65
 8002ba8:	08002cf5 	.word	0x08002cf5
 8002bac:	08002c19 	.word	0x08002c19
 8002bb0:	08002cd7 	.word	0x08002cd7
 8002bb4:	08002b65 	.word	0x08002b65
 8002bb8:	08002b65 	.word	0x08002b65
 8002bbc:	08002d17 	.word	0x08002d17
 8002bc0:	08002b65 	.word	0x08002b65
 8002bc4:	08002c19 	.word	0x08002c19
 8002bc8:	08002b65 	.word	0x08002b65
 8002bcc:	08002b65 	.word	0x08002b65
 8002bd0:	08002cdf 	.word	0x08002cdf
 8002bd4:	680b      	ldr	r3, [r1, #0]
 8002bd6:	1d1a      	adds	r2, r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	600a      	str	r2, [r1, #0]
 8002bdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0a3      	b.n	8002d30 <_printf_i+0x1f4>
 8002be8:	6825      	ldr	r5, [r4, #0]
 8002bea:	6808      	ldr	r0, [r1, #0]
 8002bec:	062e      	lsls	r6, r5, #24
 8002bee:	f100 0304 	add.w	r3, r0, #4
 8002bf2:	d50a      	bpl.n	8002c0a <_printf_i+0xce>
 8002bf4:	6805      	ldr	r5, [r0, #0]
 8002bf6:	600b      	str	r3, [r1, #0]
 8002bf8:	2d00      	cmp	r5, #0
 8002bfa:	da03      	bge.n	8002c04 <_printf_i+0xc8>
 8002bfc:	232d      	movs	r3, #45	; 0x2d
 8002bfe:	426d      	negs	r5, r5
 8002c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c04:	485e      	ldr	r0, [pc, #376]	; (8002d80 <_printf_i+0x244>)
 8002c06:	230a      	movs	r3, #10
 8002c08:	e019      	b.n	8002c3e <_printf_i+0x102>
 8002c0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c0e:	6805      	ldr	r5, [r0, #0]
 8002c10:	600b      	str	r3, [r1, #0]
 8002c12:	bf18      	it	ne
 8002c14:	b22d      	sxthne	r5, r5
 8002c16:	e7ef      	b.n	8002bf8 <_printf_i+0xbc>
 8002c18:	680b      	ldr	r3, [r1, #0]
 8002c1a:	6825      	ldr	r5, [r4, #0]
 8002c1c:	1d18      	adds	r0, r3, #4
 8002c1e:	6008      	str	r0, [r1, #0]
 8002c20:	0628      	lsls	r0, r5, #24
 8002c22:	d501      	bpl.n	8002c28 <_printf_i+0xec>
 8002c24:	681d      	ldr	r5, [r3, #0]
 8002c26:	e002      	b.n	8002c2e <_printf_i+0xf2>
 8002c28:	0669      	lsls	r1, r5, #25
 8002c2a:	d5fb      	bpl.n	8002c24 <_printf_i+0xe8>
 8002c2c:	881d      	ldrh	r5, [r3, #0]
 8002c2e:	4854      	ldr	r0, [pc, #336]	; (8002d80 <_printf_i+0x244>)
 8002c30:	2f6f      	cmp	r7, #111	; 0x6f
 8002c32:	bf0c      	ite	eq
 8002c34:	2308      	moveq	r3, #8
 8002c36:	230a      	movne	r3, #10
 8002c38:	2100      	movs	r1, #0
 8002c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c3e:	6866      	ldr	r6, [r4, #4]
 8002c40:	60a6      	str	r6, [r4, #8]
 8002c42:	2e00      	cmp	r6, #0
 8002c44:	bfa2      	ittt	ge
 8002c46:	6821      	ldrge	r1, [r4, #0]
 8002c48:	f021 0104 	bicge.w	r1, r1, #4
 8002c4c:	6021      	strge	r1, [r4, #0]
 8002c4e:	b90d      	cbnz	r5, 8002c54 <_printf_i+0x118>
 8002c50:	2e00      	cmp	r6, #0
 8002c52:	d04d      	beq.n	8002cf0 <_printf_i+0x1b4>
 8002c54:	4616      	mov	r6, r2
 8002c56:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c5a:	fb03 5711 	mls	r7, r3, r1, r5
 8002c5e:	5dc7      	ldrb	r7, [r0, r7]
 8002c60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c64:	462f      	mov	r7, r5
 8002c66:	42bb      	cmp	r3, r7
 8002c68:	460d      	mov	r5, r1
 8002c6a:	d9f4      	bls.n	8002c56 <_printf_i+0x11a>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d10b      	bne.n	8002c88 <_printf_i+0x14c>
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	07df      	lsls	r7, r3, #31
 8002c74:	d508      	bpl.n	8002c88 <_printf_i+0x14c>
 8002c76:	6923      	ldr	r3, [r4, #16]
 8002c78:	6861      	ldr	r1, [r4, #4]
 8002c7a:	4299      	cmp	r1, r3
 8002c7c:	bfde      	ittt	le
 8002c7e:	2330      	movle	r3, #48	; 0x30
 8002c80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c88:	1b92      	subs	r2, r2, r6
 8002c8a:	6122      	str	r2, [r4, #16]
 8002c8c:	f8cd a000 	str.w	sl, [sp]
 8002c90:	464b      	mov	r3, r9
 8002c92:	aa03      	add	r2, sp, #12
 8002c94:	4621      	mov	r1, r4
 8002c96:	4640      	mov	r0, r8
 8002c98:	f7ff fee2 	bl	8002a60 <_printf_common>
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	d14c      	bne.n	8002d3a <_printf_i+0x1fe>
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	b004      	add	sp, #16
 8002ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002caa:	4835      	ldr	r0, [pc, #212]	; (8002d80 <_printf_i+0x244>)
 8002cac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	680e      	ldr	r6, [r1, #0]
 8002cb4:	061f      	lsls	r7, r3, #24
 8002cb6:	f856 5b04 	ldr.w	r5, [r6], #4
 8002cba:	600e      	str	r6, [r1, #0]
 8002cbc:	d514      	bpl.n	8002ce8 <_printf_i+0x1ac>
 8002cbe:	07d9      	lsls	r1, r3, #31
 8002cc0:	bf44      	itt	mi
 8002cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8002cc6:	6023      	strmi	r3, [r4, #0]
 8002cc8:	b91d      	cbnz	r5, 8002cd2 <_printf_i+0x196>
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	f023 0320 	bic.w	r3, r3, #32
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	e7b0      	b.n	8002c38 <_printf_i+0xfc>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	f043 0320 	orr.w	r3, r3, #32
 8002cdc:	6023      	str	r3, [r4, #0]
 8002cde:	2378      	movs	r3, #120	; 0x78
 8002ce0:	4828      	ldr	r0, [pc, #160]	; (8002d84 <_printf_i+0x248>)
 8002ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ce6:	e7e3      	b.n	8002cb0 <_printf_i+0x174>
 8002ce8:	065e      	lsls	r6, r3, #25
 8002cea:	bf48      	it	mi
 8002cec:	b2ad      	uxthmi	r5, r5
 8002cee:	e7e6      	b.n	8002cbe <_printf_i+0x182>
 8002cf0:	4616      	mov	r6, r2
 8002cf2:	e7bb      	b.n	8002c6c <_printf_i+0x130>
 8002cf4:	680b      	ldr	r3, [r1, #0]
 8002cf6:	6826      	ldr	r6, [r4, #0]
 8002cf8:	6960      	ldr	r0, [r4, #20]
 8002cfa:	1d1d      	adds	r5, r3, #4
 8002cfc:	600d      	str	r5, [r1, #0]
 8002cfe:	0635      	lsls	r5, r6, #24
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	d501      	bpl.n	8002d08 <_printf_i+0x1cc>
 8002d04:	6018      	str	r0, [r3, #0]
 8002d06:	e002      	b.n	8002d0e <_printf_i+0x1d2>
 8002d08:	0671      	lsls	r1, r6, #25
 8002d0a:	d5fb      	bpl.n	8002d04 <_printf_i+0x1c8>
 8002d0c:	8018      	strh	r0, [r3, #0]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6123      	str	r3, [r4, #16]
 8002d12:	4616      	mov	r6, r2
 8002d14:	e7ba      	b.n	8002c8c <_printf_i+0x150>
 8002d16:	680b      	ldr	r3, [r1, #0]
 8002d18:	1d1a      	adds	r2, r3, #4
 8002d1a:	600a      	str	r2, [r1, #0]
 8002d1c:	681e      	ldr	r6, [r3, #0]
 8002d1e:	6862      	ldr	r2, [r4, #4]
 8002d20:	2100      	movs	r1, #0
 8002d22:	4630      	mov	r0, r6
 8002d24:	f7fd fa64 	bl	80001f0 <memchr>
 8002d28:	b108      	cbz	r0, 8002d2e <_printf_i+0x1f2>
 8002d2a:	1b80      	subs	r0, r0, r6
 8002d2c:	6060      	str	r0, [r4, #4]
 8002d2e:	6863      	ldr	r3, [r4, #4]
 8002d30:	6123      	str	r3, [r4, #16]
 8002d32:	2300      	movs	r3, #0
 8002d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d38:	e7a8      	b.n	8002c8c <_printf_i+0x150>
 8002d3a:	6923      	ldr	r3, [r4, #16]
 8002d3c:	4632      	mov	r2, r6
 8002d3e:	4649      	mov	r1, r9
 8002d40:	4640      	mov	r0, r8
 8002d42:	47d0      	blx	sl
 8002d44:	3001      	adds	r0, #1
 8002d46:	d0ab      	beq.n	8002ca0 <_printf_i+0x164>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	079b      	lsls	r3, r3, #30
 8002d4c:	d413      	bmi.n	8002d76 <_printf_i+0x23a>
 8002d4e:	68e0      	ldr	r0, [r4, #12]
 8002d50:	9b03      	ldr	r3, [sp, #12]
 8002d52:	4298      	cmp	r0, r3
 8002d54:	bfb8      	it	lt
 8002d56:	4618      	movlt	r0, r3
 8002d58:	e7a4      	b.n	8002ca4 <_printf_i+0x168>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	4632      	mov	r2, r6
 8002d5e:	4649      	mov	r1, r9
 8002d60:	4640      	mov	r0, r8
 8002d62:	47d0      	blx	sl
 8002d64:	3001      	adds	r0, #1
 8002d66:	d09b      	beq.n	8002ca0 <_printf_i+0x164>
 8002d68:	3501      	adds	r5, #1
 8002d6a:	68e3      	ldr	r3, [r4, #12]
 8002d6c:	9903      	ldr	r1, [sp, #12]
 8002d6e:	1a5b      	subs	r3, r3, r1
 8002d70:	42ab      	cmp	r3, r5
 8002d72:	dcf2      	bgt.n	8002d5a <_printf_i+0x21e>
 8002d74:	e7eb      	b.n	8002d4e <_printf_i+0x212>
 8002d76:	2500      	movs	r5, #0
 8002d78:	f104 0619 	add.w	r6, r4, #25
 8002d7c:	e7f5      	b.n	8002d6a <_printf_i+0x22e>
 8002d7e:	bf00      	nop
 8002d80:	080030c1 	.word	0x080030c1
 8002d84:	080030d2 	.word	0x080030d2

08002d88 <memcpy>:
 8002d88:	440a      	add	r2, r1
 8002d8a:	4291      	cmp	r1, r2
 8002d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d90:	d100      	bne.n	8002d94 <memcpy+0xc>
 8002d92:	4770      	bx	lr
 8002d94:	b510      	push	{r4, lr}
 8002d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d9e:	4291      	cmp	r1, r2
 8002da0:	d1f9      	bne.n	8002d96 <memcpy+0xe>
 8002da2:	bd10      	pop	{r4, pc}

08002da4 <memmove>:
 8002da4:	4288      	cmp	r0, r1
 8002da6:	b510      	push	{r4, lr}
 8002da8:	eb01 0402 	add.w	r4, r1, r2
 8002dac:	d902      	bls.n	8002db4 <memmove+0x10>
 8002dae:	4284      	cmp	r4, r0
 8002db0:	4623      	mov	r3, r4
 8002db2:	d807      	bhi.n	8002dc4 <memmove+0x20>
 8002db4:	1e43      	subs	r3, r0, #1
 8002db6:	42a1      	cmp	r1, r4
 8002db8:	d008      	beq.n	8002dcc <memmove+0x28>
 8002dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dc2:	e7f8      	b.n	8002db6 <memmove+0x12>
 8002dc4:	4402      	add	r2, r0
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	428a      	cmp	r2, r1
 8002dca:	d100      	bne.n	8002dce <memmove+0x2a>
 8002dcc:	bd10      	pop	{r4, pc}
 8002dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002dd6:	e7f7      	b.n	8002dc8 <memmove+0x24>

08002dd8 <_free_r>:
 8002dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dda:	2900      	cmp	r1, #0
 8002ddc:	d048      	beq.n	8002e70 <_free_r+0x98>
 8002dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002de2:	9001      	str	r0, [sp, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f1a1 0404 	sub.w	r4, r1, #4
 8002dea:	bfb8      	it	lt
 8002dec:	18e4      	addlt	r4, r4, r3
 8002dee:	f000 f8d3 	bl	8002f98 <__malloc_lock>
 8002df2:	4a20      	ldr	r2, [pc, #128]	; (8002e74 <_free_r+0x9c>)
 8002df4:	9801      	ldr	r0, [sp, #4]
 8002df6:	6813      	ldr	r3, [r2, #0]
 8002df8:	4615      	mov	r5, r2
 8002dfa:	b933      	cbnz	r3, 8002e0a <_free_r+0x32>
 8002dfc:	6063      	str	r3, [r4, #4]
 8002dfe:	6014      	str	r4, [r2, #0]
 8002e00:	b003      	add	sp, #12
 8002e02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e06:	f000 b8cd 	b.w	8002fa4 <__malloc_unlock>
 8002e0a:	42a3      	cmp	r3, r4
 8002e0c:	d90b      	bls.n	8002e26 <_free_r+0x4e>
 8002e0e:	6821      	ldr	r1, [r4, #0]
 8002e10:	1862      	adds	r2, r4, r1
 8002e12:	4293      	cmp	r3, r2
 8002e14:	bf04      	itt	eq
 8002e16:	681a      	ldreq	r2, [r3, #0]
 8002e18:	685b      	ldreq	r3, [r3, #4]
 8002e1a:	6063      	str	r3, [r4, #4]
 8002e1c:	bf04      	itt	eq
 8002e1e:	1852      	addeq	r2, r2, r1
 8002e20:	6022      	streq	r2, [r4, #0]
 8002e22:	602c      	str	r4, [r5, #0]
 8002e24:	e7ec      	b.n	8002e00 <_free_r+0x28>
 8002e26:	461a      	mov	r2, r3
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b10b      	cbz	r3, 8002e30 <_free_r+0x58>
 8002e2c:	42a3      	cmp	r3, r4
 8002e2e:	d9fa      	bls.n	8002e26 <_free_r+0x4e>
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	1855      	adds	r5, r2, r1
 8002e34:	42a5      	cmp	r5, r4
 8002e36:	d10b      	bne.n	8002e50 <_free_r+0x78>
 8002e38:	6824      	ldr	r4, [r4, #0]
 8002e3a:	4421      	add	r1, r4
 8002e3c:	1854      	adds	r4, r2, r1
 8002e3e:	42a3      	cmp	r3, r4
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	d1dd      	bne.n	8002e00 <_free_r+0x28>
 8002e44:	681c      	ldr	r4, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	6053      	str	r3, [r2, #4]
 8002e4a:	4421      	add	r1, r4
 8002e4c:	6011      	str	r1, [r2, #0]
 8002e4e:	e7d7      	b.n	8002e00 <_free_r+0x28>
 8002e50:	d902      	bls.n	8002e58 <_free_r+0x80>
 8002e52:	230c      	movs	r3, #12
 8002e54:	6003      	str	r3, [r0, #0]
 8002e56:	e7d3      	b.n	8002e00 <_free_r+0x28>
 8002e58:	6825      	ldr	r5, [r4, #0]
 8002e5a:	1961      	adds	r1, r4, r5
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	bf04      	itt	eq
 8002e60:	6819      	ldreq	r1, [r3, #0]
 8002e62:	685b      	ldreq	r3, [r3, #4]
 8002e64:	6063      	str	r3, [r4, #4]
 8002e66:	bf04      	itt	eq
 8002e68:	1949      	addeq	r1, r1, r5
 8002e6a:	6021      	streq	r1, [r4, #0]
 8002e6c:	6054      	str	r4, [r2, #4]
 8002e6e:	e7c7      	b.n	8002e00 <_free_r+0x28>
 8002e70:	b003      	add	sp, #12
 8002e72:	bd30      	pop	{r4, r5, pc}
 8002e74:	20000090 	.word	0x20000090

08002e78 <_malloc_r>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	1ccd      	adds	r5, r1, #3
 8002e7c:	f025 0503 	bic.w	r5, r5, #3
 8002e80:	3508      	adds	r5, #8
 8002e82:	2d0c      	cmp	r5, #12
 8002e84:	bf38      	it	cc
 8002e86:	250c      	movcc	r5, #12
 8002e88:	2d00      	cmp	r5, #0
 8002e8a:	4606      	mov	r6, r0
 8002e8c:	db01      	blt.n	8002e92 <_malloc_r+0x1a>
 8002e8e:	42a9      	cmp	r1, r5
 8002e90:	d903      	bls.n	8002e9a <_malloc_r+0x22>
 8002e92:	230c      	movs	r3, #12
 8002e94:	6033      	str	r3, [r6, #0]
 8002e96:	2000      	movs	r0, #0
 8002e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e9a:	f000 f87d 	bl	8002f98 <__malloc_lock>
 8002e9e:	4921      	ldr	r1, [pc, #132]	; (8002f24 <_malloc_r+0xac>)
 8002ea0:	680a      	ldr	r2, [r1, #0]
 8002ea2:	4614      	mov	r4, r2
 8002ea4:	b99c      	cbnz	r4, 8002ece <_malloc_r+0x56>
 8002ea6:	4f20      	ldr	r7, [pc, #128]	; (8002f28 <_malloc_r+0xb0>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b923      	cbnz	r3, 8002eb6 <_malloc_r+0x3e>
 8002eac:	4621      	mov	r1, r4
 8002eae:	4630      	mov	r0, r6
 8002eb0:	f000 f862 	bl	8002f78 <_sbrk_r>
 8002eb4:	6038      	str	r0, [r7, #0]
 8002eb6:	4629      	mov	r1, r5
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f000 f85d 	bl	8002f78 <_sbrk_r>
 8002ebe:	1c43      	adds	r3, r0, #1
 8002ec0:	d123      	bne.n	8002f0a <_malloc_r+0x92>
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	6033      	str	r3, [r6, #0]
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	f000 f86c 	bl	8002fa4 <__malloc_unlock>
 8002ecc:	e7e3      	b.n	8002e96 <_malloc_r+0x1e>
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	1b5b      	subs	r3, r3, r5
 8002ed2:	d417      	bmi.n	8002f04 <_malloc_r+0x8c>
 8002ed4:	2b0b      	cmp	r3, #11
 8002ed6:	d903      	bls.n	8002ee0 <_malloc_r+0x68>
 8002ed8:	6023      	str	r3, [r4, #0]
 8002eda:	441c      	add	r4, r3
 8002edc:	6025      	str	r5, [r4, #0]
 8002ede:	e004      	b.n	8002eea <_malloc_r+0x72>
 8002ee0:	6863      	ldr	r3, [r4, #4]
 8002ee2:	42a2      	cmp	r2, r4
 8002ee4:	bf0c      	ite	eq
 8002ee6:	600b      	streq	r3, [r1, #0]
 8002ee8:	6053      	strne	r3, [r2, #4]
 8002eea:	4630      	mov	r0, r6
 8002eec:	f000 f85a 	bl	8002fa4 <__malloc_unlock>
 8002ef0:	f104 000b 	add.w	r0, r4, #11
 8002ef4:	1d23      	adds	r3, r4, #4
 8002ef6:	f020 0007 	bic.w	r0, r0, #7
 8002efa:	1ac2      	subs	r2, r0, r3
 8002efc:	d0cc      	beq.n	8002e98 <_malloc_r+0x20>
 8002efe:	1a1b      	subs	r3, r3, r0
 8002f00:	50a3      	str	r3, [r4, r2]
 8002f02:	e7c9      	b.n	8002e98 <_malloc_r+0x20>
 8002f04:	4622      	mov	r2, r4
 8002f06:	6864      	ldr	r4, [r4, #4]
 8002f08:	e7cc      	b.n	8002ea4 <_malloc_r+0x2c>
 8002f0a:	1cc4      	adds	r4, r0, #3
 8002f0c:	f024 0403 	bic.w	r4, r4, #3
 8002f10:	42a0      	cmp	r0, r4
 8002f12:	d0e3      	beq.n	8002edc <_malloc_r+0x64>
 8002f14:	1a21      	subs	r1, r4, r0
 8002f16:	4630      	mov	r0, r6
 8002f18:	f000 f82e 	bl	8002f78 <_sbrk_r>
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d1dd      	bne.n	8002edc <_malloc_r+0x64>
 8002f20:	e7cf      	b.n	8002ec2 <_malloc_r+0x4a>
 8002f22:	bf00      	nop
 8002f24:	20000090 	.word	0x20000090
 8002f28:	20000094 	.word	0x20000094

08002f2c <_realloc_r>:
 8002f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2e:	4607      	mov	r7, r0
 8002f30:	4614      	mov	r4, r2
 8002f32:	460e      	mov	r6, r1
 8002f34:	b921      	cbnz	r1, 8002f40 <_realloc_r+0x14>
 8002f36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	f7ff bf9c 	b.w	8002e78 <_malloc_r>
 8002f40:	b922      	cbnz	r2, 8002f4c <_realloc_r+0x20>
 8002f42:	f7ff ff49 	bl	8002dd8 <_free_r>
 8002f46:	4625      	mov	r5, r4
 8002f48:	4628      	mov	r0, r5
 8002f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f4c:	f000 f830 	bl	8002fb0 <_malloc_usable_size_r>
 8002f50:	42a0      	cmp	r0, r4
 8002f52:	d20f      	bcs.n	8002f74 <_realloc_r+0x48>
 8002f54:	4621      	mov	r1, r4
 8002f56:	4638      	mov	r0, r7
 8002f58:	f7ff ff8e 	bl	8002e78 <_malloc_r>
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d0f2      	beq.n	8002f48 <_realloc_r+0x1c>
 8002f62:	4631      	mov	r1, r6
 8002f64:	4622      	mov	r2, r4
 8002f66:	f7ff ff0f 	bl	8002d88 <memcpy>
 8002f6a:	4631      	mov	r1, r6
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	f7ff ff33 	bl	8002dd8 <_free_r>
 8002f72:	e7e9      	b.n	8002f48 <_realloc_r+0x1c>
 8002f74:	4635      	mov	r5, r6
 8002f76:	e7e7      	b.n	8002f48 <_realloc_r+0x1c>

08002f78 <_sbrk_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	4d06      	ldr	r5, [pc, #24]	; (8002f94 <_sbrk_r+0x1c>)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	4604      	mov	r4, r0
 8002f80:	4608      	mov	r0, r1
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	f7fd ff48 	bl	8000e18 <_sbrk>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_sbrk_r+0x1a>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_sbrk_r+0x1a>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	200001f4 	.word	0x200001f4

08002f98 <__malloc_lock>:
 8002f98:	4801      	ldr	r0, [pc, #4]	; (8002fa0 <__malloc_lock+0x8>)
 8002f9a:	f000 b811 	b.w	8002fc0 <__retarget_lock_acquire_recursive>
 8002f9e:	bf00      	nop
 8002fa0:	200001fc 	.word	0x200001fc

08002fa4 <__malloc_unlock>:
 8002fa4:	4801      	ldr	r0, [pc, #4]	; (8002fac <__malloc_unlock+0x8>)
 8002fa6:	f000 b80c 	b.w	8002fc2 <__retarget_lock_release_recursive>
 8002faa:	bf00      	nop
 8002fac:	200001fc 	.word	0x200001fc

08002fb0 <_malloc_usable_size_r>:
 8002fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb4:	1f18      	subs	r0, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bfbc      	itt	lt
 8002fba:	580b      	ldrlt	r3, [r1, r0]
 8002fbc:	18c0      	addlt	r0, r0, r3
 8002fbe:	4770      	bx	lr

08002fc0 <__retarget_lock_acquire_recursive>:
 8002fc0:	4770      	bx	lr

08002fc2 <__retarget_lock_release_recursive>:
 8002fc2:	4770      	bx	lr

08002fc4 <_init>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr

08002fd0 <_fini>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr
