/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdarg.h>
#include <string.h>
#include <stdint.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
#define FLASH_SECTOR2_BASE_ADDRESS 0x8008000U

//enable this line to get debug messages over debug uart
#define BL_DEBUG_MSG_EN

#define rc_data_length 200
uint8_t rc_data[rc_data_length];

#define BL_GET_VER 						0x51
#define BL_GET_HELP						0x52
#define BL_GET_CID						0x53
#define BL_GET_RDP_STATUS				0x54
#define BL_GO_TO_ADDR					0x55
#define BL_FLASH_ERASE					0x56
#define BBL_MEM_WRITE					0x57
#define BL_EN_R_W_PROTECT				0x58
#define BL_MEM_READ						0x59
#define BL_READ_SECTOR_STATUS			0x5A
#define BL_OTP_READ						0x5B
#define BL_DIS_R_W_PROTECT				0x5C

//#len details of the command
#define COMMAND_BL_GET_VER_LEN                              =6
#define COMMAND_BL_GET_HELP_LEN                             =6
#define COMMAND_BL_GET_CID_LEN                              =6
#define COMMAND_BL_GET_RDP_STATUS_LEN                       =6
#define COMMAND_BL_GO_TO_ADDR_LEN                           =10
#define COMMAND_BL_FLASH_ERASE_LEN                          =8
#define COMMAND_BL_MEM_WRITE_LEN                            =11
#define COMMAND_BL_EN_R_W_PROTECT_LEN                       =8
#define COMMAND_BL_READ_SECTOR_P_STATUS_LEN                 =6
#define COMMAND_BL_DIS_R_W_PROTECT_LEN                      =6
#define COMMAND_BL_MY_NEW_COMMAND_LEN                       =8

/*	CHECK CRC 	*/
#define CRC_CORRECT 	1
#define CRC_FAILED 		0

/* ACK and NACK bytes*/
#define BL_ACK   0XA5
#define BL_NACK  0X7F

//version 1.0
#define BL_VERSION 				0x10

#define ADDR_VALID 				0x00
#define ADDR_INVALID 			0x01

#define INVALID_SECTOR 			0x04

/*Some Start and End addresses of different memories of STM32F446xx MCU */
/*Change this according to your MCU */
#define SRAM1_SIZE            	128*1024     				// STM32F411xx has 128KB of SRAM1
#define SRAM1_END             	(SRAM1_BASE + SRAM1_SIZE)
#define FLASH_SIZE             	512*1024     				// STM32F411xx has 512KB of FLASH

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CRC_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
static void printmsg(char *format, ...);
static void userMode(void);
static void bootloaderMode(void);

void BL_GET_VER_handler(void);
void BL_GET_HELP_handler(void);
void BL_GET_CID_handler(void);
void BL_GET_RDP_STATUS_handler(void);
void BL_GO_TO_ADDR_handler(void);
void BL_FLASH_ERASE_handler(void);
void BL_MEM_WRITE_handler(void);
void BL_EN_R_W_PROTECT_handler(void);
void BL_MEM_READ_handler(void);
void BL_READ_SECTOR_STATUS_handler(void);
void BL_OTP_READ_handler(void);
void BL_DIS_R_W_PROTECT_handler(void);

uint8_t checkCRC(uint8_t *pBuffer_data, uint8_t pBuffer_len_cmd,
		uint32_t CRC_host);

void send_Reply(uint8_t *pBuffer, uint8_t length);
void send_NACK(void);
void send_ACK(uint8_t length);

uint8_t verify_address(uint32_t go_address);

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len);


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_CRC_Init();
	MX_USART1_UART_Init();
	MX_USART2_UART_Init();
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		/* Lets check whether button is pressed or not, if not pressed jump to user application */
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
			//			printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
			HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
			//we should continue in bootloader mode
			bootloaderMode();

		} else {
			printmsg(
					"BL_DEBUG_MSG:Button is not pressed .. executing user app\n\r");
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);

			//jump to user application
			userMode();

		}
	}
}
/* USER CODE END 3 */

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 200;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ = 8;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
		Error_Handler();
	}
}

/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {

	/* USER CODE BEGIN CRC_Init 0 */

	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}

/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
	huart1.Init.BaudRate = 115200;
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart1) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
/* prints formatted string to console over UART */
void printmsg(char *format, ...) {
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
	vsprintf(str, format, args);
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
	va_end(args);
#endif
}

void userMode(void) {

	void (*reset_handler)(void);
	printmsg("bootloader_jump_to_user_app\n\r");

// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;

	printmsg("BL_DEBUG_MSG:MSP value : %#x\n\r", msp_value);

//This function comes from CMSIS.
	__set_MSP(msp_value);

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address =
			*(volatile uint32_t*) (FLASH_SECTOR2_BASE_ADDRESS + 4);

	reset_handler = (void*) resethandler_address;
	printmsg("app reset handler addr : %#x\n\r", reset_handler);

//3. jump to reset handler of the user application
//	HAL_DeInit();
	reset_handler();

}

void bootloaderMode(void) {
//	while (1) {
//		uint32_t current_tick = HAL_GetTick();
//		while ((HAL_GetTick() - current_tick) < 500)
//			;
//		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
//	}

	uint8_t length_cmd = 0;
	while (1) {
		memset(rc_data, 0, rc_data_length);
		HAL_UART_Receive(&huart2, rc_data, 1, HAL_MAX_DELAY);
		length_cmd = rc_data[0];
		HAL_UART_Receive(&huart2, &rc_data[1], length_cmd, HAL_MAX_DELAY);

		switch (rc_data[1]) {
		case BL_GET_VER:
			BL_GET_VER_handler();
			break;
		case BL_GET_HELP:
			BL_GET_HELP_handler();
			break;
		case BL_GET_CID:
			BL_GET_CID_handler();
			break;
		case BL_GET_RDP_STATUS:
			BL_GET_RDP_STATUS_handler();
			break;
		case BL_GO_TO_ADDR:
			BL_GO_TO_ADDR_handler();
			break;
		case BL_FLASH_ERASE:
			BL_FLASH_ERASE_handler();
			break;
		case BBL_MEM_WRITE:
			BL_MEM_WRITE_handler();
			break;
		case BL_EN_R_W_PROTECT:
			BL_EN_R_W_PROTECT_handler();
			break;
		case BL_MEM_READ:
			BL_MEM_READ_handler();
			break;
		case BL_READ_SECTOR_STATUS:
			BL_READ_SECTOR_STATUS_handler();
			break;
		case BL_OTP_READ:
			BL_OTP_READ_handler();
			break;
		case BL_DIS_R_W_PROTECT:
			BL_DIS_R_W_PROTECT_handler();
			break;
		default:
			printmsg("invalid command!!!");
			break;
		}
	}
}
uint8_t checkCRC(uint8_t *pBuffer_data, uint8_t pBuffer_len_cmd,
		uint32_t CRC_host) {
	uint32_t value_CRC = 0;

	for (uint8_t var = 0; var <= (pBuffer_len_cmd - 4); ++var) {
		uint32_t value = pBuffer_data[var];
		value_CRC = HAL_CRC_Accumulate(&hcrc, &value, 1);
	}
	__HAL_CRC_DR_RESET(&hcrc);
	if (value_CRC == CRC_host)
		return CRC_CORRECT;
	return CRC_FAILED;
}

void send_ACK(uint8_t length) {
	uint8_t tx_buffer[2];
	tx_buffer[0] = BL_ACK;
	tx_buffer[1] = length;

	HAL_UART_Transmit(&huart2, tx_buffer, 2, HAL_MAX_DELAY);
}

void send_NACK(void) {
	uint8_t tx_buffer[1];
	tx_buffer[0] = BL_NACK;
	HAL_UART_Transmit(&huart2, tx_buffer, 1, HAL_MAX_DELAY);

}

void send_Reply(uint8_t *pBuffer, uint8_t length) {
	HAL_UART_Transmit(&huart2, pBuffer, length, HAL_MAX_DELAY);

}

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address) {
	//so, what are the valid addresses to which we can jump ?
	//can we jump to system memory ? yes
	//can we jump to sram1 memory ?  yes
	//can we jump to sram2 memory ? yes
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if (go_address >= SRAM1_BASE && go_address <= SRAM1_END) {
		return ADDR_VALID;
	} else if (go_address >= FLASH_BASE && go_address <= FLASH_END) {
		return ADDR_VALID;
	} else
		return ADDR_INVALID;
}

uint8_t execute_flash_erase(uint8_t sector_number, uint8_t number_of_sector) {
	//we have totally 8 sectors in STM32F411 mcu .. sector[0 to 7]
	//number_of_sector has to be in the range of 0 to 7
	// if sector_number = 0xff , that means mass erase !

	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;

	if (number_of_sector > 8)
		return INVALID_SECTOR;

	if ((sector_number == 0xff) || (sector_number <= 7)) {
		if (sector_number == (uint8_t) 0xff) {
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
		} else {
			/*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
			if (number_of_sector > remanining_sector) {
				number_of_sector = remanining_sector;
			}
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
			flashErase_handle.Sector = sector_number; // this is the initial sector
			flashErase_handle.NbSectors = number_of_sector;
		}
		flashErase_handle.Banks = FLASH_BANK_1;

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our mcu will work on this voltage range
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
		HAL_FLASH_Lock();

		return status;
	}

	return INVALID_SECTOR;
}

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len) {
	uint8_t status = HAL_OK;

	//We have to unlock flash module to get control of registers
	HAL_FLASH_Unlock();

	for (uint32_t i = 0; i < len; i++) {
		//Here we program the flash byte by byte
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + i,
				pBuffer[i]);
	}

	HAL_FLASH_Lock();

	return status;
}

void BL_GET_VER_handler(void) {

	uint32_t length_cmd = rc_data[0] + 1;
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
		send_ACK(1);
		uint8_t bootloader_ver = BL_VERSION;
		send_Reply(&bootloader_ver, 1);

	} else {
		send_NACK();
	}
}

void BL_GET_HELP_handler(void) {
	uint32_t length_cmd = rc_data[0] + 1;
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
		send_ACK(12);
		uint8_t all_cmd[] = { BL_GET_VER, BL_GET_HELP, BL_GET_CID,
		BL_GET_RDP_STATUS, BL_GO_TO_ADDR,
		BL_FLASH_ERASE, BBL_MEM_WRITE, BL_EN_R_W_PROTECT, BL_MEM_READ,
		BL_READ_SECTOR_STATUS,
		BL_OTP_READ, BL_DIS_R_W_PROTECT };
		send_Reply(all_cmd, sizeof(all_cmd));

	} else {
		send_NACK();
	}
}

void BL_GET_CID_handler(void) {
	uint32_t length_cmd = rc_data[0] + 1;
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
		send_ACK(2);
		uint16_t chip_id;
		chip_id = (uint16_t) (DBGMCU->IDCODE) & 0xFFF;

		send_Reply((uint8_t*) &chip_id, 2);

	} else {
		send_NACK();
	}
}

void BL_GET_RDP_STATUS_handler(void) {
	uint32_t length_cmd = rc_data[0] + 1;
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
		send_ACK(1);

		uint8_t status_RDP = 0;
		volatile uint32_t *status_RDP_addr = (uint32_t*) 0x1FFFC000;
		status_RDP = (uint8_t) ((*status_RDP_addr) >> 8);

		send_Reply(&status_RDP, 1);

	} else {
		send_NACK();
	}
}

// USER_APP_ADDR = 0x0800889D
void BL_GO_TO_ADDR_handler(void) {
	uint32_t length_cmd = rc_data[0] + 1;
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
	uint32_t go_address = 0;
	go_address = rc_data[2] | rc_data[3] << 8 | rc_data[4] << 16
			| rc_data[5] << 24;
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
		send_ACK(1);

		if (verify_address(go_address) == ADDR_VALID) {
			send_Reply((uint8_t*) ADDR_VALID, 1);
			void (*jump_addr)(void) = (void*)go_address;
			jump_addr();
		} else {
			send_Reply((uint8_t*) ADDR_INVALID, 1);
		}
	} else {
		send_NACK();
	}
}

void BL_FLASH_ERASE_handler(void) {
	uint32_t length_cmd = rc_data[0] + 1;
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
	uint8_t erase_status = 0x00;

	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
		send_ACK(1);
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, 1);
		erase_status = execute_flash_erase(rc_data[2], rc_data[3]);
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, 0);

		send_Reply(&erase_status, 1);

	} else {
		send_NACK();
	}
}

void BL_MEM_WRITE_handler(void) {
	uint32_t length_cmd = rc_data[0] + 1;
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));

	uint8_t addr_valid = ADDR_VALID;
	uint8_t write_status = 0x00;
	uint8_t payload_len = rc_data[6];

	uint32_t mem_address = *((uint32_t*) (&rc_data[2]));


	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
		send_ACK(1);

		if (verify_address(mem_address) == ADDR_VALID) {

			//glow the led to indicate bootloader is currently writing to memory
			HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);

			//execute mem write
			write_status = execute_mem_write(&rc_data[7], mem_address,
					payload_len);

			//turn off the led to indicate memory write is over
			HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);

			//inform host about the status
			send_Reply(&write_status, 1);
		} else {

			write_status = ADDR_INVALID;
			//inform host that address is invalid
			send_Reply(&write_status, 1);
		}

	} else {
		send_NACK();
	}
}

void BL_EN_R_W_PROTECT_handler(void) {

}

void BL_MEM_READ_handler(void) {

}

void BL_READ_SECTOR_STATUS_handler(void) {

}

void BL_OTP_READ_handler(void) {

}

void BL_DIS_R_W_PROTECT_handler(void) {

}

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

