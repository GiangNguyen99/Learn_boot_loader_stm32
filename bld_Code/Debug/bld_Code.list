
bld_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003628  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080037c8  080037c8  000137c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003870  08003870  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003878  08003878  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  080038f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080038f0  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa85  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca5  00000000  00000000  0002ab25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0002c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002d080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ea6  00000000  00000000  0002d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f3d  00000000  00000000  0004372e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d5b  00000000  00000000  0004d66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d43c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002608  00000000  00000000  000d441c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037b0 	.word	0x080037b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080037b0 	.word	0x080037b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800058c:	f000 fe48 	bl	8001220 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000590:	f000 f82a 	bl	80005e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000594:	f000 f8fa 	bl	800078c <MX_GPIO_Init>
	MX_CRC_Init();
 8000598:	f000 f890 	bl	80006bc <MX_CRC_Init>
	MX_USART1_UART_Init();
 800059c:	f000 f8a2 	bl	80006e4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80005a0:	f000 f8ca 	bl	8000738 <MX_USART2_UART_Init>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		/* Lets check whether button is pressed or not, if not pressed jump to user application */
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 80005a4:	2101      	movs	r1, #1
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <main+0x54>)
 80005a8:	f001 fc44 	bl	8001e34 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d108      	bne.n	80005c4 <main+0x3c>
			//			printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
			HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <main+0x58>)
 80005ba:	f001 fc53 	bl	8001e64 <HAL_GPIO_WritePin>
			//we should continue in bootloader mode
			bootloaderMode();
 80005be:	f000 f989 	bl	80008d4 <bootloaderMode>
 80005c2:	e7ef      	b.n	80005a4 <main+0x1c>

		} else {
			printmsg(
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <main+0x5c>)
 80005c6:	f000 f943 	bl	8000850 <printmsg>
					"BL_DEBUG_MSG:Button is not pressed .. executing user app\n\r");
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <main+0x58>)
 80005d2:	f001 fc47 	bl	8001e64 <HAL_GPIO_WritePin>

			//jump to user application
			userMode();
 80005d6:	f000 f961 	bl	800089c <userMode>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 80005da:	e7e3      	b.n	80005a4 <main+0x1c>
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40020c00 	.word	0x40020c00
 80005e4:	080037c8 	.word	0x080037c8

080005e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fca4 	bl	8002f44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 200;
 800065c:	23c8      	movs	r3, #200	; 0xc8
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000660:	2304      	movs	r3, #4
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8000664:	2308      	movs	r3, #8
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fc13 	bl	8001e98 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
		Error_Handler();
 8000678:	f000 fc69 	bl	8000f4e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2103      	movs	r1, #3
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fe74 	bl	8002388 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
		Error_Handler();
 80006a6:	f000 fc52 	bl	8000f4e <Error_Handler>
	}
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_CRC_Init+0x20>)
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <MX_CRC_Init+0x24>)
 80006c4:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_CRC_Init+0x20>)
 80006c8:	f000 ff01 	bl	80014ce <HAL_CRC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_CRC_Init+0x1a>
		Error_Handler();
 80006d2:	f000 fc3c 	bl	8000f4e <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000098 	.word	0x20000098
 80006e0:	40023000 	.word	0x40023000

080006e4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART1_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 800071c:	f002 f830 	bl	8002780 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000726:	f000 fc12 	bl	8000f4e <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000a0 	.word	0x200000a0
 8000734:	40011000 	.word	0x40011000

08000738 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART2_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000770:	f002 f806 	bl	8002780 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800077a:	f000 fbe8 	bl	8000f4e <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200001ac 	.word	0x200001ac
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_GPIO_Init+0xb8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a26      	ldr	r2, [pc, #152]	; (8000844 <MX_GPIO_Init+0xb8>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <MX_GPIO_Init+0xb8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_GPIO_Init+0xb8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <MX_GPIO_Init+0xb8>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_GPIO_Init+0xb8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_GPIO_Init+0xb8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a18      	ldr	r2, [pc, #96]	; (8000844 <MX_GPIO_Init+0xb8>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_GPIO_Init+0xb8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0xbc>)
 80007fe:	f001 fb31 	bl	8001e64 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000802:	2301      	movs	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000806:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800080a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_GPIO_Init+0xc0>)
 8000818:	f001 f988 	bl	8001b2c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 800081c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000820:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xbc>)
 8000836:	f001 f979 	bl	8001b2c <HAL_GPIO_Init>

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020c00 	.word	0x40020c00
 800084c:	40020000 	.word	0x40020000

08000850 <printmsg>:

/* USER CODE BEGIN 4 */
/* prints formatted string to console over UART */
void printmsg(char *format, ...) {
 8000850:	b40f      	push	{r0, r1, r2, r3}
 8000852:	b580      	push	{r7, lr}
 8000854:	b096      	sub	sp, #88	; 0x58
 8000856:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000858:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800085c:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fb8a 	bl	8002f80 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fcb5 	bl	80001e0 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	f107 0108 	add.w	r1, r7, #8
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <printmsg+0x48>)
 8000884:	f001 ffc9 	bl	800281a <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000888:	bf00      	nop
 800088a:	3758      	adds	r7, #88	; 0x58
 800088c:	46bd      	mov	sp, r7
 800088e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000892:	b004      	add	sp, #16
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	200001ac 	.word	0x200001ac

0800089c <userMode>:

void userMode(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

	void (*reset_handler)(void);

// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t*) FLASH_SECTOR2_BASE_ADDRESS;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <userMode+0x30>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	f383 8808 	msr	MSP, r3
}
 80008b2:	bf00      	nop

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address =
			*(volatile uint32_t*) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <userMode+0x34>)
	uint32_t resethandler_address =
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60bb      	str	r3, [r7, #8]

	reset_handler = (void*) resethandler_address;
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	607b      	str	r3, [r7, #4]

//3. jump to reset handler of the user application
	reset_handler();
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4798      	blx	r3

}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	08008000 	.word	0x08008000
 80008d0:	08008004 	.word	0x08008004

080008d4 <bootloaderMode>:

void bootloaderMode(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

	uint8_t length_cmd = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	71fb      	strb	r3, [r7, #7]
	while (1) {
		memset(rc_data, 0, rc_data_length);
 80008de:	22c8      	movs	r2, #200	; 0xc8
 80008e0:	2100      	movs	r1, #0
 80008e2:	482f      	ldr	r0, [pc, #188]	; (80009a0 <bootloaderMode+0xcc>)
 80008e4:	f002 fb2e 	bl	8002f44 <memset>
		HAL_UART_Receive(&huart2, rc_data, 1, HAL_MAX_DELAY);
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2201      	movs	r2, #1
 80008ee:	492c      	ldr	r1, [pc, #176]	; (80009a0 <bootloaderMode+0xcc>)
 80008f0:	482c      	ldr	r0, [pc, #176]	; (80009a4 <bootloaderMode+0xd0>)
 80008f2:	f002 f824 	bl	800293e <HAL_UART_Receive>
		length_cmd = rc_data[0];
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <bootloaderMode+0xcc>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart2, &rc_data[1], length_cmd, HAL_MAX_DELAY);
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	4928      	ldr	r1, [pc, #160]	; (80009a8 <bootloaderMode+0xd4>)
 8000906:	4827      	ldr	r0, [pc, #156]	; (80009a4 <bootloaderMode+0xd0>)
 8000908:	f002 f819 	bl	800293e <HAL_UART_Receive>

		switch (rc_data[1]) {
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <bootloaderMode+0xcc>)
 800090e:	785b      	ldrb	r3, [r3, #1]
 8000910:	3b51      	subs	r3, #81	; 0x51
 8000912:	2b0b      	cmp	r3, #11
 8000914:	d83e      	bhi.n	8000994 <bootloaderMode+0xc0>
 8000916:	a201      	add	r2, pc, #4	; (adr r2, 800091c <bootloaderMode+0x48>)
 8000918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091c:	0800094d 	.word	0x0800094d
 8000920:	08000953 	.word	0x08000953
 8000924:	08000959 	.word	0x08000959
 8000928:	0800095f 	.word	0x0800095f
 800092c:	08000965 	.word	0x08000965
 8000930:	0800096b 	.word	0x0800096b
 8000934:	08000971 	.word	0x08000971
 8000938:	08000977 	.word	0x08000977
 800093c:	0800097d 	.word	0x0800097d
 8000940:	08000983 	.word	0x08000983
 8000944:	08000989 	.word	0x08000989
 8000948:	0800098f 	.word	0x0800098f
		case BL_GET_VER:
			BL_GET_VER_handler();
 800094c:	f000 f93a 	bl	8000bc4 <BL_GET_VER_handler>
			break;
 8000950:	e024      	b.n	800099c <bootloaderMode+0xc8>
		case BL_GET_HELP:
			BL_GET_HELP_handler();
 8000952:	f000 f961 	bl	8000c18 <BL_GET_HELP_handler>
			break;
 8000956:	e021      	b.n	800099c <bootloaderMode+0xc8>
		case BL_GET_CID:
			BL_GET_CID_handler();
 8000958:	f000 f98e 	bl	8000c78 <BL_GET_CID_handler>
			break;
 800095c:	e01e      	b.n	800099c <bootloaderMode+0xc8>
		case BL_GET_RDP_STATUS:
			BL_GET_RDP_STATUS_handler();
 800095e:	f000 f9bd 	bl	8000cdc <BL_GET_RDP_STATUS_handler>
			break;
 8000962:	e01b      	b.n	800099c <bootloaderMode+0xc8>
		case BL_GO_TO_ADDR:
			BL_GO_TO_ADDR_handler();
 8000964:	f000 f9ee 	bl	8000d44 <BL_GO_TO_ADDR_handler>
			break;
 8000968:	e018      	b.n	800099c <bootloaderMode+0xc8>
		case BL_FLASH_ERASE:
			BL_FLASH_ERASE_handler();
 800096a:	f000 fa33 	bl	8000dd4 <BL_FLASH_ERASE_handler>
			break;
 800096e:	e015      	b.n	800099c <bootloaderMode+0xc8>
		case BBL_MEM_WRITE:
			BL_MEM_WRITE_handler();
 8000970:	f000 fa72 	bl	8000e58 <BL_MEM_WRITE_handler>
			break;
 8000974:	e012      	b.n	800099c <bootloaderMode+0xc8>
		case BL_EN_R_W_PROTECT:
			BL_EN_R_W_PROTECT_handler();
 8000976:	f000 fac7 	bl	8000f08 <BL_EN_R_W_PROTECT_handler>
			break;
 800097a:	e00f      	b.n	800099c <bootloaderMode+0xc8>
		case BL_MEM_READ:
			BL_MEM_READ_handler();
 800097c:	f000 facb 	bl	8000f16 <BL_MEM_READ_handler>
			break;
 8000980:	e00c      	b.n	800099c <bootloaderMode+0xc8>
		case BL_READ_SECTOR_STATUS:
			BL_READ_SECTOR_STATUS_handler();
 8000982:	f000 facf 	bl	8000f24 <BL_READ_SECTOR_STATUS_handler>
			break;
 8000986:	e009      	b.n	800099c <bootloaderMode+0xc8>
		case BL_OTP_READ:
			BL_OTP_READ_handler();
 8000988:	f000 fad3 	bl	8000f32 <BL_OTP_READ_handler>
			break;
 800098c:	e006      	b.n	800099c <bootloaderMode+0xc8>
		case BL_DIS_R_W_PROTECT:
			BL_DIS_R_W_PROTECT_handler();
 800098e:	f000 fad7 	bl	8000f40 <BL_DIS_R_W_PROTECT_handler>
			break;
 8000992:	e003      	b.n	800099c <bootloaderMode+0xc8>
		default:
			printmsg("invalid command!!!");
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <bootloaderMode+0xd8>)
 8000996:	f7ff ff5b 	bl	8000850 <printmsg>
			break;
 800099a:	bf00      	nop
		memset(rc_data, 0, rc_data_length);
 800099c:	e79f      	b.n	80008de <bootloaderMode+0xa>
 800099e:	bf00      	nop
 80009a0:	200000e4 	.word	0x200000e4
 80009a4:	200001ac 	.word	0x200001ac
 80009a8:	200000e5 	.word	0x200000e5
 80009ac:	08003804 	.word	0x08003804

080009b0 <checkCRC>:
		}
	}
}
uint8_t checkCRC(uint8_t *pBuffer_data, uint8_t pBuffer_len_cmd,
		uint32_t CRC_host) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	460b      	mov	r3, r1
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	72fb      	strb	r3, [r7, #11]
	uint32_t value_CRC = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]

	for (uint8_t var = 0; var <= (pBuffer_len_cmd - 4); ++var) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	76fb      	strb	r3, [r7, #27]
 80009c6:	e00f      	b.n	80009e8 <checkCRC+0x38>
		uint32_t value = pBuffer_data[var];
 80009c8:	7efb      	ldrb	r3, [r7, #27]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	617b      	str	r3, [r7, #20]
		value_CRC = HAL_CRC_Accumulate(&hcrc, &value, 1);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2201      	movs	r2, #1
 80009d8:	4619      	mov	r1, r3
 80009da:	480f      	ldr	r0, [pc, #60]	; (8000a18 <checkCRC+0x68>)
 80009dc:	f000 fd93 	bl	8001506 <HAL_CRC_Accumulate>
 80009e0:	61f8      	str	r0, [r7, #28]
	for (uint8_t var = 0; var <= (pBuffer_len_cmd - 4); ++var) {
 80009e2:	7efb      	ldrb	r3, [r7, #27]
 80009e4:	3301      	adds	r3, #1
 80009e6:	76fb      	strb	r3, [r7, #27]
 80009e8:	7afb      	ldrb	r3, [r7, #11]
 80009ea:	1eda      	subs	r2, r3, #3
 80009ec:	7efb      	ldrb	r3, [r7, #27]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dcea      	bgt.n	80009c8 <checkCRC+0x18>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <checkCRC+0x68>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	689a      	ldr	r2, [r3, #8]
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <checkCRC+0x68>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f042 0201 	orr.w	r2, r2, #1
 8000a00:	609a      	str	r2, [r3, #8]
	if (value_CRC == CRC_host)
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d101      	bne.n	8000a0e <checkCRC+0x5e>
		return CRC_CORRECT;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <checkCRC+0x60>
	return CRC_FAILED;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000098 	.word	0x20000098

08000a1c <send_ACK>:

void send_ACK(uint8_t length) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buffer[2];
	tx_buffer[0] = BL_ACK;
 8000a26:	23a5      	movs	r3, #165	; 0xa5
 8000a28:	733b      	strb	r3, [r7, #12]
	tx_buffer[1] = length;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart2, tx_buffer, 2, HAL_MAX_DELAY);
 8000a2e:	f107 010c 	add.w	r1, r7, #12
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	2202      	movs	r2, #2
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <send_ACK+0x2c>)
 8000a3a:	f001 feee 	bl	800281a <HAL_UART_Transmit>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200001ac 	.word	0x200001ac

08000a4c <send_NACK>:

void send_NACK(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[1];
	tx_buffer[0] = BL_NACK;
 8000a52:	237f      	movs	r3, #127	; 0x7f
 8000a54:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, tx_buffer, 1, HAL_MAX_DELAY);
 8000a56:	1d39      	adds	r1, r7, #4
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <send_NACK+0x20>)
 8000a60:	f001 fedb 	bl	800281a <HAL_UART_Transmit>

}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200001ac 	.word	0x200001ac

08000a70 <send_Reply>:

void send_Reply(uint8_t *pBuffer, uint8_t length) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart2, pBuffer, length, HAL_MAX_DELAY);
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <send_Reply+0x24>)
 8000a88:	f001 fec7 	bl	800281a <HAL_UART_Transmit>

}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200001ac 	.word	0x200001ac

08000a98 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if (go_address >= SRAM1_BASE && go_address <= SRAM1_END) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000aa6:	d305      	bcc.n	8000ab4 <verify_address+0x1c>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <verify_address+0x40>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d801      	bhi.n	8000ab4 <verify_address+0x1c>
		return ADDR_VALID;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e00a      	b.n	8000aca <verify_address+0x32>
	} else if (go_address >= FLASH_BASE && go_address <= FLASH_END) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000aba:	d305      	bcc.n	8000ac8 <verify_address+0x30>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a07      	ldr	r2, [pc, #28]	; (8000adc <verify_address+0x44>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d801      	bhi.n	8000ac8 <verify_address+0x30>
		return ADDR_VALID;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e000      	b.n	8000aca <verify_address+0x32>
	} else
		return ADDR_INVALID;
 8000ac8:	2301      	movs	r3, #1
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20020000 	.word	0x20020000
 8000adc:	0807ffff 	.word	0x0807ffff

08000ae0 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number, uint8_t number_of_sector) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	460a      	mov	r2, r1
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	4613      	mov	r3, r2
 8000aee:	71bb      	strb	r3, [r7, #6]

	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;

	if (number_of_sector > 8)
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	d901      	bls.n	8000afa <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8000af6:	2304      	movs	r3, #4
 8000af8:	e035      	b.n	8000b66 <execute_flash_erase+0x86>

	if ((sector_number == 0xff) || (sector_number <= 7)) {
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2bff      	cmp	r3, #255	; 0xff
 8000afe:	d002      	beq.n	8000b06 <execute_flash_erase+0x26>
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	d82e      	bhi.n	8000b64 <execute_flash_erase+0x84>
		if (sector_number == (uint8_t) 0xff) {
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2bff      	cmp	r3, #255	; 0xff
 8000b0a:	d102      	bne.n	8000b12 <execute_flash_erase+0x32>
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	e012      	b.n	8000b38 <execute_flash_erase+0x58>
		} else {
			/*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f1c3 0308 	rsb	r3, r3, #8
 8000b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (number_of_sector > remanining_sector) {
 8000b1c:	79ba      	ldrb	r2, [r7, #6]
 8000b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d902      	bls.n	8000b2c <execute_flash_erase+0x4c>
				number_of_sector = remanining_sector;
 8000b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b2a:	71bb      	strb	r3, [r7, #6]
			}
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8000b3c:	f000 fd62 	bl	8001604 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our mcu will work on this voltage range
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000b44:	f107 020c 	add.w	r2, r7, #12
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 feca 	bl	80018e8 <HAL_FLASHEx_Erase>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8000b5a:	f000 fd75 	bl	8001648 <HAL_FLASH_Lock>

		return status;
 8000b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b62:	e000      	b.n	8000b66 <execute_flash_erase+0x86>
	}

	return INVALID_SECTOR;
 8000b64:	2304      	movs	r3, #4
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len) {
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
	uint8_t status = HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	75fb      	strb	r3, [r7, #23]

	//We have to unlock flash module to get control of registers
	HAL_FLASH_Unlock();
 8000b7e:	f000 fd41 	bl	8001604 <HAL_FLASH_Unlock>

	for (uint32_t i = 0; i < len; i++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	e011      	b.n	8000bac <execute_mem_write+0x3e>
		//Here we program the flash byte by byte
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + i,
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	18d1      	adds	r1, r2, r3
				pBuffer[i]);
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4413      	add	r3, r2
 8000b94:	781b      	ldrb	r3, [r3, #0]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + i,
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 fcdd 	bl	800155c <HAL_FLASH_Program>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < len; i++) {
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d3e9      	bcc.n	8000b88 <execute_mem_write+0x1a>
	}

	HAL_FLASH_Lock();
 8000bb4:	f000 fd48 	bl	8001648 <HAL_FLASH_Lock>

	return status;
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <BL_GET_VER_handler>:

void BL_GET_VER_handler(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0

	uint32_t length_cmd = rc_data[0] + 1;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <BL_GET_VER_handler+0x50>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3b04      	subs	r3, #4
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <BL_GET_VER_handler+0x50>)
 8000bd8:	4413      	add	r3, r2
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60bb      	str	r3, [r7, #8]
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <BL_GET_VER_handler+0x50>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	4619      	mov	r1, r3
 8000be6:	480b      	ldr	r0, [pc, #44]	; (8000c14 <BL_GET_VER_handler+0x50>)
 8000be8:	f7ff fee2 	bl	80009b0 <checkCRC>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00a      	beq.n	8000c08 <BL_GET_VER_handler+0x44>
		send_ACK(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff ff12 	bl	8000a1c <send_ACK>
		uint8_t bootloader_ver = BL_VERSION;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	71fb      	strb	r3, [r7, #7]
		send_Reply(&bootloader_ver, 1);
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff35 	bl	8000a70 <send_Reply>

	} else {
		send_NACK();
	}
}
 8000c06:	e001      	b.n	8000c0c <BL_GET_VER_handler+0x48>
		send_NACK();
 8000c08:	f7ff ff20 	bl	8000a4c <send_NACK>
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000e4 	.word	0x200000e4

08000c18 <BL_GET_HELP_handler>:

void BL_GET_HELP_handler(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
	uint32_t length_cmd = rc_data[0] + 1;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <BL_GET_HELP_handler+0x58>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3b04      	subs	r3, #4
 8000c2a:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <BL_GET_HELP_handler+0x58>)
 8000c2c:	4413      	add	r3, r2
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	613b      	str	r3, [r7, #16]
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <BL_GET_HELP_handler+0x58>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <BL_GET_HELP_handler+0x58>)
 8000c3c:	f7ff feb8 	bl	80009b0 <checkCRC>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00d      	beq.n	8000c62 <BL_GET_HELP_handler+0x4a>
		send_ACK(12);
 8000c46:	200c      	movs	r0, #12
 8000c48:	f7ff fee8 	bl	8000a1c <send_ACK>
		uint8_t all_cmd[] = { BL_GET_VER, BL_GET_HELP, BL_GET_CID,
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <BL_GET_HELP_handler+0x5c>)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		BL_GET_RDP_STATUS, BL_GO_TO_ADDR,
		BL_FLASH_ERASE, BBL_MEM_WRITE, BL_EN_R_W_PROTECT, BL_MEM_READ,
		BL_READ_SECTOR_STATUS,
		BL_OTP_READ, BL_DIS_R_W_PROTECT };
		send_Reply(all_cmd, sizeof(all_cmd));
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	210c      	movs	r1, #12
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff08 	bl	8000a70 <send_Reply>

	} else {
		send_NACK();
	}
}
 8000c60:	e001      	b.n	8000c66 <BL_GET_HELP_handler+0x4e>
		send_NACK();
 8000c62:	f7ff fef3 	bl	8000a4c <send_NACK>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000e4 	.word	0x200000e4
 8000c74:	08003818 	.word	0x08003818

08000c78 <BL_GET_CID_handler>:

void BL_GET_CID_handler(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
	uint32_t length_cmd = rc_data[0] + 1;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <BL_GET_CID_handler+0x5c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	60fb      	str	r3, [r7, #12]
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3b04      	subs	r3, #4
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <BL_GET_CID_handler+0x5c>)
 8000c8c:	4413      	add	r3, r2
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60bb      	str	r3, [r7, #8]
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <BL_GET_CID_handler+0x5c>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <BL_GET_CID_handler+0x5c>)
 8000c9c:	f7ff fe88 	bl	80009b0 <checkCRC>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00f      	beq.n	8000cc6 <BL_GET_CID_handler+0x4e>
		send_ACK(2);
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f7ff feb8 	bl	8000a1c <send_ACK>
		uint16_t chip_id;
		chip_id = (uint16_t) (DBGMCU->IDCODE) & 0xFFF;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <BL_GET_CID_handler+0x60>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	80fb      	strh	r3, [r7, #6]

		send_Reply((uint8_t*) &chip_id, 2);
 8000cba:	1dbb      	adds	r3, r7, #6
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fed6 	bl	8000a70 <send_Reply>

	} else {
		send_NACK();
	}
}
 8000cc4:	e001      	b.n	8000cca <BL_GET_CID_handler+0x52>
		send_NACK();
 8000cc6:	f7ff fec1 	bl	8000a4c <send_NACK>
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000e4 	.word	0x200000e4
 8000cd8:	e0042000 	.word	0xe0042000

08000cdc <BL_GET_RDP_STATUS_handler>:

void BL_GET_RDP_STATUS_handler(void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
	uint32_t length_cmd = rc_data[0] + 1;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <BL_GET_RDP_STATUS_handler+0x60>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3b04      	subs	r3, #4
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <BL_GET_RDP_STATUS_handler+0x60>)
 8000cf0:	4413      	add	r3, r2
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60bb      	str	r3, [r7, #8]
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <BL_GET_RDP_STATUS_handler+0x60>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480f      	ldr	r0, [pc, #60]	; (8000d3c <BL_GET_RDP_STATUS_handler+0x60>)
 8000d00:	f7ff fe56 	bl	80009b0 <checkCRC>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d011      	beq.n	8000d2e <BL_GET_RDP_STATUS_handler+0x52>
		send_ACK(1);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff fe86 	bl	8000a1c <send_ACK>

		uint8_t status_RDP = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	70fb      	strb	r3, [r7, #3]
		volatile uint32_t *status_RDP_addr = (uint32_t*) 0x1FFFC000;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <BL_GET_RDP_STATUS_handler+0x64>)
 8000d16:	607b      	str	r3, [r7, #4]
		status_RDP = (uint8_t) ((*status_RDP_addr) >> 8);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	70fb      	strb	r3, [r7, #3]

		send_Reply(&status_RDP, 1);
 8000d22:	1cfb      	adds	r3, r7, #3
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fea2 	bl	8000a70 <send_Reply>

	} else {
		send_NACK();
	}
}
 8000d2c:	e001      	b.n	8000d32 <BL_GET_RDP_STATUS_handler+0x56>
		send_NACK();
 8000d2e:	f7ff fe8d 	bl	8000a4c <send_NACK>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000e4 	.word	0x200000e4
 8000d40:	1fffc000 	.word	0x1fffc000

08000d44 <BL_GO_TO_ADDR_handler>:

// USER_APP_ADDR = 0x0800889D
void BL_GO_TO_ADDR_handler(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
	uint32_t length_cmd = rc_data[0] + 1;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <BL_GO_TO_ADDR_handler+0x8c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3b04      	subs	r3, #4
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <BL_GO_TO_ADDR_handler+0x8c>)
 8000d58:	4413      	add	r3, r2
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60bb      	str	r3, [r7, #8]
	uint32_t go_address = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
	go_address = rc_data[2] | rc_data[3] << 8 | rc_data[4] << 16
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <BL_GO_TO_ADDR_handler+0x8c>)
 8000d64:	789b      	ldrb	r3, [r3, #2]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <BL_GO_TO_ADDR_handler+0x8c>)
 8000d6a:	78db      	ldrb	r3, [r3, #3]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <BL_GO_TO_ADDR_handler+0x8c>)
 8000d72:	791b      	ldrb	r3, [r3, #4]
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	431a      	orrs	r2, r3
			| rc_data[5] << 24;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <BL_GO_TO_ADDR_handler+0x8c>)
 8000d7a:	795b      	ldrb	r3, [r3, #5]
 8000d7c:	061b      	lsls	r3, r3, #24
 8000d7e:	4313      	orrs	r3, r2
	go_address = rc_data[2] | rc_data[3] << 8 | rc_data[4] << 16
 8000d80:	607b      	str	r3, [r7, #4]
	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <BL_GO_TO_ADDR_handler+0x8c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <BL_GO_TO_ADDR_handler+0x8c>)
 8000d8c:	f7ff fe10 	bl	80009b0 <checkCRC>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d016      	beq.n	8000dc4 <BL_GO_TO_ADDR_handler+0x80>
		send_ACK(1);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff fe40 	bl	8000a1c <send_ACK>

		if (verify_address(go_address) == ADDR_VALID) {
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fe7b 	bl	8000a98 <verify_address>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d108      	bne.n	8000dba <BL_GO_TO_ADDR_handler+0x76>
			send_Reply((uint8_t*) ADDR_VALID, 1);
 8000da8:	2101      	movs	r1, #1
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff fe60 	bl	8000a70 <send_Reply>
			void (*jump_addr)(void) = (void*)go_address;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	603b      	str	r3, [r7, #0]
			jump_addr();
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	4798      	blx	r3
			send_Reply((uint8_t*) ADDR_INVALID, 1);
		}
	} else {
		send_NACK();
	}
}
 8000db8:	e006      	b.n	8000dc8 <BL_GO_TO_ADDR_handler+0x84>
			send_Reply((uint8_t*) ADDR_INVALID, 1);
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fe57 	bl	8000a70 <send_Reply>
}
 8000dc2:	e001      	b.n	8000dc8 <BL_GO_TO_ADDR_handler+0x84>
		send_NACK();
 8000dc4:	f7ff fe42 	bl	8000a4c <send_NACK>
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000e4 	.word	0x200000e4

08000dd4 <BL_FLASH_ERASE_handler>:

void BL_FLASH_ERASE_handler(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
	uint32_t length_cmd = rc_data[0] + 1;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <BL_FLASH_ERASE_handler+0x7c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3b04      	subs	r3, #4
 8000de6:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <BL_FLASH_ERASE_handler+0x7c>)
 8000de8:	4413      	add	r3, r2
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60bb      	str	r3, [r7, #8]
	uint8_t erase_status = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]

	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <BL_FLASH_ERASE_handler+0x7c>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4815      	ldr	r0, [pc, #84]	; (8000e50 <BL_FLASH_ERASE_handler+0x7c>)
 8000dfc:	f7ff fdd8 	bl	80009b0 <checkCRC>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d01e      	beq.n	8000e44 <BL_FLASH_ERASE_handler+0x70>
		send_ACK(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff fe08 	bl	8000a1c <send_ACK>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, 1);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e12:	4810      	ldr	r0, [pc, #64]	; (8000e54 <BL_FLASH_ERASE_handler+0x80>)
 8000e14:	f001 f826 	bl	8001e64 <HAL_GPIO_WritePin>
		erase_status = execute_flash_erase(rc_data[2], rc_data[3]);
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <BL_FLASH_ERASE_handler+0x7c>)
 8000e1a:	789b      	ldrb	r3, [r3, #2]
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <BL_FLASH_ERASE_handler+0x7c>)
 8000e1e:	78d2      	ldrb	r2, [r2, #3]
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fe5c 	bl	8000ae0 <execute_flash_erase>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e32:	4808      	ldr	r0, [pc, #32]	; (8000e54 <BL_FLASH_ERASE_handler+0x80>)
 8000e34:	f001 f816 	bl	8001e64 <HAL_GPIO_WritePin>

		send_Reply(&erase_status, 1);
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe17 	bl	8000a70 <send_Reply>

	} else {
		send_NACK();
	}
}
 8000e42:	e001      	b.n	8000e48 <BL_FLASH_ERASE_handler+0x74>
		send_NACK();
 8000e44:	f7ff fe02 	bl	8000a4c <send_NACK>
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200000e4 	.word	0x200000e4
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <BL_MEM_WRITE_handler>:

void BL_MEM_WRITE_handler(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
	uint32_t length_cmd = rc_data[0] + 1;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <BL_MEM_WRITE_handler+0xa0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
	uint32_t CRC_host = *((uint32_t*) (rc_data + length_cmd - 4));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3b04      	subs	r3, #4
 8000e6a:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <BL_MEM_WRITE_handler+0xa0>)
 8000e6c:	4413      	add	r3, r2
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	613b      	str	r3, [r7, #16]

	uint8_t write_status = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint8_t payload_len = rc_data[6];
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <BL_MEM_WRITE_handler+0xa0>)
 8000e78:	799b      	ldrb	r3, [r3, #6]
 8000e7a:	73fb      	strb	r3, [r7, #15]

	uint32_t mem_address = *((uint32_t*) (&rc_data[2]));
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <BL_MEM_WRITE_handler+0xa4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60bb      	str	r3, [r7, #8]


	if (checkCRC(rc_data, rc_data[0], CRC_host)) {
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <BL_MEM_WRITE_handler+0xa0>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481b      	ldr	r0, [pc, #108]	; (8000ef8 <BL_MEM_WRITE_handler+0xa0>)
 8000e8c:	f7ff fd90 	bl	80009b0 <checkCRC>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d02a      	beq.n	8000eec <BL_MEM_WRITE_handler+0x94>
		send_ACK(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fdc0 	bl	8000a1c <send_ACK>

		if (verify_address(mem_address) == ADDR_VALID) {
 8000e9c:	68b8      	ldr	r0, [r7, #8]
 8000e9e:	f7ff fdfb 	bl	8000a98 <verify_address>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d119      	bne.n	8000edc <BL_MEM_WRITE_handler+0x84>

			//glow the led to indicate bootloader is currently writing to memory
			HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eae:	4814      	ldr	r0, [pc, #80]	; (8000f00 <BL_MEM_WRITE_handler+0xa8>)
 8000eb0:	f000 ffd8 	bl	8001e64 <HAL_GPIO_WritePin>

			//execute mem write
			write_status = execute_mem_write(&rc_data[7], mem_address,
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <BL_MEM_WRITE_handler+0xac>)
 8000ebc:	f7ff fe57 	bl	8000b6e <execute_mem_write>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
					payload_len);

			//turn off the led to indicate memory write is over
			HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <BL_MEM_WRITE_handler+0xa8>)
 8000ecc:	f000 ffca 	bl	8001e64 <HAL_GPIO_WritePin>

			//inform host about the status
			send_Reply(&write_status, 1);
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fdcb 	bl	8000a70 <send_Reply>
		}

	} else {
		send_NACK();
	}
}
 8000eda:	e009      	b.n	8000ef0 <BL_MEM_WRITE_handler+0x98>
			write_status = ADDR_INVALID;
 8000edc:	2301      	movs	r3, #1
 8000ede:	71fb      	strb	r3, [r7, #7]
			send_Reply(&write_status, 1);
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fdc3 	bl	8000a70 <send_Reply>
}
 8000eea:	e001      	b.n	8000ef0 <BL_MEM_WRITE_handler+0x98>
		send_NACK();
 8000eec:	f7ff fdae 	bl	8000a4c <send_NACK>
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200000e4 	.word	0x200000e4
 8000efc:	200000e6 	.word	0x200000e6
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	200000eb 	.word	0x200000eb

08000f08 <BL_EN_R_W_PROTECT_handler>:

void BL_EN_R_W_PROTECT_handler(void) {
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <BL_MEM_READ_handler>:

void BL_MEM_READ_handler(void) {
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <BL_READ_SECTOR_STATUS_handler>:

void BL_READ_SECTOR_STATUS_handler(void) {
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <BL_OTP_READ_handler>:

void BL_OTP_READ_handler(void) {
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <BL_DIS_R_W_PROTECT_handler>:

void BL_DIS_R_W_PROTECT_handler(void) {
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f52:	b672      	cpsid	i
}
 8000f54:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f56:	e7fe      	b.n	8000f56 <Error_Handler+0x8>

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f96:	2007      	movs	r0, #7
 8000f98:	f000 fa66 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_CRC_MspInit+0x3c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10d      	bne.n	8000fd6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_CRC_MspInit+0x40>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <HAL_CRC_MspInit+0x40>)
 8000fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_CRC_MspInit+0x40>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023000 	.word	0x40023000
 8000fe8:	40023800 	.word	0x40023800

08000fec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_UART_MspInit+0xe8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12c      	bne.n	8001068 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a30      	ldr	r2, [pc, #192]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001018:	f043 0310 	orr.w	r3, r3, #16
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a29      	ldr	r2, [pc, #164]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_UART_MspInit+0xec>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001046:	23c0      	movs	r3, #192	; 0xc0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001056:	2307      	movs	r3, #7
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	481e      	ldr	r0, [pc, #120]	; (80010dc <HAL_UART_MspInit+0xf0>)
 8001062:	f000 fd63 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001066:	e030      	b.n	80010ca <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <HAL_UART_MspInit+0xf4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d12b      	bne.n	80010ca <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0xec>)
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_UART_MspInit+0xec>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_UART_MspInit+0xec>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010aa:	2360      	movs	r3, #96	; 0x60
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ba:	2307      	movs	r3, #7
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4807      	ldr	r0, [pc, #28]	; (80010e4 <HAL_UART_MspInit+0xf8>)
 80010c6:	f000 fd31 	bl	8001b2c <HAL_GPIO_Init>
}
 80010ca:	bf00      	nop
 80010cc:	3730      	adds	r7, #48	; 0x30
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40004400 	.word	0x40004400
 80010e4:	40020c00 	.word	0x40020c00

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001134:	f000 f8c6 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001144:	4a14      	ldr	r2, [pc, #80]	; (8001198 <_sbrk+0x5c>)
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <_sbrk+0x60>)
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <_sbrk+0x64>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <_sbrk+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	429a      	cmp	r2, r3
 800116a:	d207      	bcs.n	800117c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800116c:	f001 fec0 	bl	8002ef0 <__errno>
 8001170:	4603      	mov	r3, r0
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e009      	b.n	8001190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001182:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <_sbrk+0x64>)
 800118c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20020000 	.word	0x20020000
 800119c:	00000400 	.word	0x00000400
 80011a0:	2000008c 	.word	0x2000008c
 80011a4:	20000228 	.word	0x20000228

080011a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <SystemInit+0x20>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <SystemInit+0x20>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001204 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011d2:	490e      	ldr	r1, [pc, #56]	; (800120c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d4:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e8:	4c0b      	ldr	r4, [pc, #44]	; (8001218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011f6:	f7ff ffd7 	bl	80011a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fa:	f001 fe7f 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fe:	f7ff f9c3 	bl	8000588 <main>
  bx  lr    
 8001202:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001204:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001210:	08003880 	.word	0x08003880
  ldr r2, =_sbss
 8001214:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001218:	20000224 	.word	0x20000224

0800121c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC_IRQHandler>
	...

08001220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_Init+0x40>)
 800122a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_Init+0x40>)
 8001236:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x40>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f90d 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fe80 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f917 	bl	80014b6 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f8ed 	bl	800147e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x20>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x24>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_IncTick+0x24>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000008 	.word	0x20000008
 80012e8:	200001f0 	.word	0x200001f0

080012ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return uwTick;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_GetTick+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200001f0 	.word	0x200001f0

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff47 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001490:	f7ff ff5c 	bl	800134c <__NVIC_GetPriorityGrouping>
 8001494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff ff8e 	bl	80013bc <NVIC_EncodePriority>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff5d 	bl	8001368 <__NVIC_SetPriority>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffb0 	bl	8001424 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e00e      	b.n	80014fe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	795b      	ldrb	r3, [r3, #5]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d105      	bne.n	80014f6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fd59 	bl	8000fa8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001506:	b480      	push	{r7}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2202      	movs	r2, #2
 800151a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00a      	b.n	8001538 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	441a      	add	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3f0      	bcc.n	8001522 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2201      	movs	r2, #1
 800154c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800154e:	693b      	ldr	r3, [r7, #16]
}
 8001550:	4618      	mov	r0, r3
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_FLASH_Program+0xa0>)
 8001570:	7e1b      	ldrb	r3, [r3, #24]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_FLASH_Program+0x1e>
 8001576:	2302      	movs	r3, #2
 8001578:	e03b      	b.n	80015f2 <HAL_FLASH_Program+0x96>
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_FLASH_Program+0xa0>)
 800157c:	2201      	movs	r2, #1
 800157e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001580:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001584:	f000 f870 	bl	8001668 <FLASH_WaitForLastOperation>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d12b      	bne.n	80015ea <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d105      	bne.n	80015a4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001598:	783b      	ldrb	r3, [r7, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	68b8      	ldr	r0, [r7, #8]
 800159e:	f000 f91b 	bl	80017d8 <FLASH_Program_Byte>
 80015a2:	e016      	b.n	80015d2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d105      	bne.n	80015b6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80015aa:	883b      	ldrh	r3, [r7, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	68b8      	ldr	r0, [r7, #8]
 80015b0:	f000 f8ee 	bl	8001790 <FLASH_Program_HalfWord>
 80015b4:	e00d      	b.n	80015d2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d105      	bne.n	80015c8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4619      	mov	r1, r3
 80015c0:	68b8      	ldr	r0, [r7, #8]
 80015c2:	f000 f8c3 	bl	800174c <FLASH_Program_Word>
 80015c6:	e004      	b.n	80015d2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80015c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f000 f88b 	bl	80016e8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015d6:	f000 f847 	bl	8001668 <FLASH_WaitForLastOperation>
 80015da:	4603      	mov	r3, r0
 80015dc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_FLASH_Program+0xa4>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_FLASH_Program+0xa4>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_FLASH_Program+0xa0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	761a      	strb	r2, [r3, #24]
  
  return status;
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200001f4 	.word	0x200001f4
 8001600:	40023c00 	.word	0x40023c00

08001604 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_FLASH_Unlock+0x38>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b00      	cmp	r3, #0
 8001614:	da0b      	bge.n	800162e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_FLASH_Unlock+0x38>)
 8001618:	4a09      	ldr	r2, [pc, #36]	; (8001640 <HAL_FLASH_Unlock+0x3c>)
 800161a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_FLASH_Unlock+0x38>)
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_FLASH_Unlock+0x40>)
 8001620:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_FLASH_Unlock+0x38>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	2b00      	cmp	r3, #0
 8001628:	da01      	bge.n	800162e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800162e:	79fb      	ldrb	r3, [r7, #7]
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40023c00 	.word	0x40023c00
 8001640:	45670123 	.word	0x45670123
 8001644:	cdef89ab 	.word	0xcdef89ab

08001648 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_FLASH_Lock+0x1c>)
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_FLASH_Lock+0x1c>)
 8001652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001656:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40023c00 	.word	0x40023c00

08001668 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <FLASH_WaitForLastOperation+0x78>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800167a:	f7ff fe37 	bl	80012ec <HAL_GetTick>
 800167e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001680:	e010      	b.n	80016a4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d00c      	beq.n	80016a4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d007      	beq.n	80016a0 <FLASH_WaitForLastOperation+0x38>
 8001690:	f7ff fe2c 	bl	80012ec <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d201      	bcs.n	80016a4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e019      	b.n	80016d8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <FLASH_WaitForLastOperation+0x7c>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1e8      	bne.n	8001682 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <FLASH_WaitForLastOperation+0x7c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <FLASH_WaitForLastOperation+0x7c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <FLASH_WaitForLastOperation+0x7c>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80016ce:	f000 f8a5 	bl	800181c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
  
}  
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200001f4 	.word	0x200001f4
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <FLASH_Program_DoubleWord+0x60>)
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <FLASH_Program_DoubleWord+0x60>)
 80016fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <FLASH_Program_DoubleWord+0x60>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4a10      	ldr	r2, [pc, #64]	; (8001748 <FLASH_Program_DoubleWord+0x60>)
 8001706:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800170a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <FLASH_Program_DoubleWord+0x60>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <FLASH_Program_DoubleWord+0x60>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800171e:	f3bf 8f6f 	isb	sy
}
 8001722:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001724:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	000a      	movs	r2, r1
 8001732:	2300      	movs	r3, #0
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	3104      	adds	r1, #4
 8001738:	4613      	mov	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40023c00 	.word	0x40023c00

0800174c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <FLASH_Program_Word+0x40>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	4a0c      	ldr	r2, [pc, #48]	; (800178c <FLASH_Program_Word+0x40>)
 800175c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001760:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <FLASH_Program_Word+0x40>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <FLASH_Program_Word+0x40>)
 8001768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <FLASH_Program_Word+0x40>)
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	4a06      	ldr	r2, [pc, #24]	; (800178c <FLASH_Program_Word+0x40>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	601a      	str	r2, [r3, #0]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40023c00 	.word	0x40023c00

08001790 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <FLASH_Program_HalfWord+0x44>)
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <FLASH_Program_HalfWord+0x44>)
 80017a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <FLASH_Program_HalfWord+0x44>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <FLASH_Program_HalfWord+0x44>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <FLASH_Program_HalfWord+0x44>)
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <FLASH_Program_HalfWord+0x44>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	801a      	strh	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <FLASH_Program_Byte+0x40>)
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <FLASH_Program_Byte+0x40>)
 80017ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <FLASH_Program_Byte+0x40>)
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <FLASH_Program_Byte+0x40>)
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <FLASH_Program_Byte+0x40>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <FLASH_Program_Byte+0x40>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	701a      	strb	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	f043 0310 	orr.w	r3, r3, #16
 8001834:	4a2b      	ldr	r2, [pc, #172]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 8001836:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 800183a:	2210      	movs	r2, #16
 800183c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 8001854:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 8001858:	2220      	movs	r2, #32
 800185a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 8001872:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 8001876:	2240      	movs	r2, #64	; 0x40
 8001878:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 8001890:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d009      	beq.n	80018b8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 80018ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 80018b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <FLASH_SetErrorCode+0xc8>)
 80018ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <FLASH_SetErrorCode+0xc4>)
 80018d2:	2202      	movs	r2, #2
 80018d4:	60da      	str	r2, [r3, #12]
  }
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	200001f4 	.word	0x200001f4

080018e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <HAL_FLASHEx_Erase+0xd8>)
 80018fc:	7e1b      	ldrb	r3, [r3, #24]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_FLASHEx_Erase+0x1e>
 8001902:	2302      	movs	r3, #2
 8001904:	e058      	b.n	80019b8 <HAL_FLASHEx_Erase+0xd0>
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <HAL_FLASHEx_Erase+0xd8>)
 8001908:	2201      	movs	r2, #1
 800190a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800190c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001910:	f7ff feaa 	bl	8001668 <FLASH_WaitForLastOperation>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d148      	bne.n	80019b0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d115      	bne.n	800195a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4619      	mov	r1, r3
 800193a:	4610      	mov	r0, r2
 800193c:	f000 f844 	bl	80019c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001940:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001944:	f7ff fe90 	bl	8001668 <FLASH_WaitForLastOperation>
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_FLASHEx_Erase+0xdc>)
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_FLASHEx_Erase+0xdc>)
 8001952:	f023 0304 	bic.w	r3, r3, #4
 8001956:	6113      	str	r3, [r2, #16]
 8001958:	e028      	b.n	80019ac <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	e01c      	b.n	800199c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4619      	mov	r1, r3
 800196a:	68b8      	ldr	r0, [r7, #8]
 800196c:	f000 f850 	bl	8001a10 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001970:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001974:	f7ff fe78 	bl	8001668 <FLASH_WaitForLastOperation>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_FLASHEx_Erase+0xdc>)
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_FLASHEx_Erase+0xdc>)
 8001982:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001986:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	601a      	str	r2, [r3, #0]
          break;
 8001994:	e00a      	b.n	80019ac <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	3301      	adds	r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4413      	add	r3, r2
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3da      	bcc.n	8001962 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80019ac:	f000 f878 	bl	8001aa0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_FLASHEx_Erase+0xd8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	761a      	strb	r2, [r3, #24]

  return status;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200001f4 	.word	0x200001f4
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <FLASH_MassErase+0x44>)
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <FLASH_MassErase+0x44>)
 80019da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <FLASH_MassErase+0x44>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <FLASH_MassErase+0x44>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <FLASH_MassErase+0x44>)
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	4313      	orrs	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <FLASH_MassErase+0x44>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6113      	str	r3, [r2, #16]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023c00 	.word	0x40023c00

08001a10 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e010      	b.n	8001a4e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d103      	bne.n	8001a3a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e009      	b.n	8001a4e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d103      	bne.n	8001a48 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	e002      	b.n	8001a4e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001a48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	490f      	ldr	r1, [pc, #60]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <FLASH_Erase_Sector+0x8c>)
 8001a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8e:	6113      	str	r3, [r2, #16]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d017      	beq.n	8001ae0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001ab6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001aba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001ac2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ad2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d017      	beq.n	8001b1c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001af6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001afe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b0e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <FLASH_FlushCaches+0x88>)
 8001b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1a:	6013      	str	r3, [r2, #0]
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	e159      	b.n	8001dfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 8148 	bne.w	8001df6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d005      	beq.n	8001b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d130      	bne.n	8001be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 0201 	and.w	r2, r3, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d017      	beq.n	8001c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d123      	bne.n	8001c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	08da      	lsrs	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3208      	adds	r2, #8
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	69b9      	ldr	r1, [r7, #24]
 8001c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0203 	and.w	r2, r3, #3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a2 	beq.w	8001df6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <HAL_GPIO_Init+0x2e8>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a56      	ldr	r2, [pc, #344]	; (8001e14 <HAL_GPIO_Init+0x2e8>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b54      	ldr	r3, [pc, #336]	; (8001e14 <HAL_GPIO_Init+0x2e8>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cce:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_GPIO_Init+0x2ec>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a49      	ldr	r2, [pc, #292]	; (8001e1c <HAL_GPIO_Init+0x2f0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x202>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a48      	ldr	r2, [pc, #288]	; (8001e20 <HAL_GPIO_Init+0x2f4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x1fe>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a47      	ldr	r2, [pc, #284]	; (8001e24 <HAL_GPIO_Init+0x2f8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x1fa>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a46      	ldr	r2, [pc, #280]	; (8001e28 <HAL_GPIO_Init+0x2fc>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x1f6>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a45      	ldr	r2, [pc, #276]	; (8001e2c <HAL_GPIO_Init+0x300>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x1f2>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d1e:	2307      	movs	r3, #7
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d40:	4935      	ldr	r1, [pc, #212]	; (8001e18 <HAL_GPIO_Init+0x2ec>)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d72:	4a2f      	ldr	r2, [pc, #188]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d78:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9c:	4a24      	ldr	r2, [pc, #144]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da2:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc6:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df0:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_GPIO_Init+0x304>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	f67f aea2 	bls.w	8001b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40020800 	.word	0x40020800
 8001e28:	40020c00 	.word	0x40020c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40013c00 	.word	0x40013c00

08001e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	041a      	lsls	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	619a      	str	r2, [r3, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e264      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d075      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb6:	4ba3      	ldr	r3, [pc, #652]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d00c      	beq.n	8001edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec2:	4ba0      	ldr	r3, [pc, #640]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d112      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ece:	4b9d      	ldr	r3, [pc, #628]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eda:	d10b      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	4b99      	ldr	r3, [pc, #612]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05b      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x108>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d157      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e23f      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_OscConfig+0x74>
 8001efe:	4b91      	ldr	r3, [pc, #580]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a90      	ldr	r2, [pc, #576]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x98>
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a8a      	ldr	r2, [pc, #552]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a87      	ldr	r2, [pc, #540]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f30:	4b84      	ldr	r3, [pc, #528]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a83      	ldr	r2, [pc, #524]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b81      	ldr	r3, [pc, #516]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a80      	ldr	r2, [pc, #512]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f9cc 	bl	80012ec <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f9c8 	bl	80012ec <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e204      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b76      	ldr	r3, [pc, #472]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xc0>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff f9b8 	bl	80012ec <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff f9b4 	bl	80012ec <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1f0      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b6c      	ldr	r3, [pc, #432]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0xe8>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fae:	4b65      	ldr	r3, [pc, #404]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b62      	ldr	r3, [pc, #392]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1c4      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b56      	ldr	r3, [pc, #344]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4952      	ldr	r1, [pc, #328]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <HAL_RCC_OscConfig+0x2b0>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff f96d 	bl	80012ec <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff f969 	bl	80012ec <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1a5      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b43      	ldr	r3, [pc, #268]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4940      	ldr	r1, [pc, #256]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b3f      	ldr	r3, [pc, #252]	; (8002148 <HAL_RCC_OscConfig+0x2b0>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f94c 	bl	80012ec <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff f948 	bl	80012ec <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e184      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d030      	beq.n	80020e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d016      	beq.n	80020b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_RCC_OscConfig+0x2b4>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f92c 	bl	80012ec <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff f928 	bl	80012ec <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e164      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x200>
 80020b6:	e015      	b.n	80020e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b8:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCC_OscConfig+0x2b4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff f915 	bl	80012ec <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c6:	f7ff f911 	bl	80012ec <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e14d      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 80020da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a0 	beq.w	8002232 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_OscConfig+0x2b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d121      	bne.n	8002172 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_RCC_OscConfig+0x2b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_RCC_OscConfig+0x2b8>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff f8d7 	bl	80012ec <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	e011      	b.n	8002166 <HAL_RCC_OscConfig+0x2ce>
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	42470000 	.word	0x42470000
 800214c:	42470e80 	.word	0x42470e80
 8002150:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002154:	f7ff f8ca 	bl	80012ec <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e106      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b85      	ldr	r3, [pc, #532]	; (800237c <HAL_RCC_OscConfig+0x4e4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d106      	bne.n	8002188 <HAL_RCC_OscConfig+0x2f0>
 800217a:	4b81      	ldr	r3, [pc, #516]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a80      	ldr	r2, [pc, #512]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6713      	str	r3, [r2, #112]	; 0x70
 8002186:	e01c      	b.n	80021c2 <HAL_RCC_OscConfig+0x32a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d10c      	bne.n	80021aa <HAL_RCC_OscConfig+0x312>
 8002190:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4a7a      	ldr	r2, [pc, #488]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
 800219c:	4b78      	ldr	r3, [pc, #480]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a77      	ldr	r2, [pc, #476]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	e00b      	b.n	80021c2 <HAL_RCC_OscConfig+0x32a>
 80021aa:	4b75      	ldr	r3, [pc, #468]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a74      	ldr	r2, [pc, #464]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70
 80021b6:	4b72      	ldr	r3, [pc, #456]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a71      	ldr	r2, [pc, #452]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d015      	beq.n	80021f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7ff f88f 	bl	80012ec <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7ff f88b 	bl	80012ec <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0c5      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	4b65      	ldr	r3, [pc, #404]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ee      	beq.n	80021d2 <HAL_RCC_OscConfig+0x33a>
 80021f4:	e014      	b.n	8002220 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7ff f879 	bl	80012ec <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7ff f875 	bl	80012ec <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e0af      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ee      	bne.n	80021fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a55      	ldr	r2, [pc, #340]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 809b 	beq.w	8002372 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223c:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d05c      	beq.n	8002302 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d141      	bne.n	80022d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <HAL_RCC_OscConfig+0x4ec>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff f849 	bl	80012ec <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225e:	f7ff f845 	bl	80012ec <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e081      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002270:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	019b      	lsls	r3, r3, #6
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	3b01      	subs	r3, #1
 8002296:	041b      	lsls	r3, r3, #16
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	061b      	lsls	r3, r3, #24
 80022a0:	4937      	ldr	r1, [pc, #220]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_OscConfig+0x4ec>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff f81e 	bl	80012ec <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff f81a 	bl	80012ec <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e056      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x41c>
 80022d2:	e04e      	b.n	8002372 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_RCC_OscConfig+0x4ec>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff f807 	bl	80012ec <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e2:	f7ff f803 	bl	80012ec <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e03f      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f0      	bne.n	80022e2 <HAL_RCC_OscConfig+0x44a>
 8002300:	e037      	b.n	8002372 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e032      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_RCC_OscConfig+0x4e8>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d028      	beq.n	800236e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d121      	bne.n	800236e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d11a      	bne.n	800236e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800233e:	4013      	ands	r3, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002344:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002346:	4293      	cmp	r3, r2
 8002348:	d111      	bne.n	800236e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	3b01      	subs	r3, #1
 8002358:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d107      	bne.n	800236e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40007000 	.word	0x40007000
 8002380:	40023800 	.word	0x40023800
 8002384:	42470060 	.word	0x42470060

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe ff38 	bl	80012ec <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe ff34 	bl	80012ec <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fe98 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	08003824 	.word	0x08003824
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	2300      	movs	r3, #0
 8002566:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256c:	4b67      	ldr	r3, [pc, #412]	; (800270c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d00d      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x40>
 8002578:	2b08      	cmp	r3, #8
 800257a:	f200 80bd 	bhi.w	80026f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x34>
 8002582:	2b04      	cmp	r3, #4
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x3a>
 8002586:	e0b7      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002588:	4b61      	ldr	r3, [pc, #388]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800258a:	60bb      	str	r3, [r7, #8]
       break;
 800258c:	e0b7      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800258e:	4b61      	ldr	r3, [pc, #388]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002590:	60bb      	str	r3, [r7, #8]
      break;
 8002592:	e0b4      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002594:	4b5d      	ldr	r3, [pc, #372]	; (800270c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800259c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d04d      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	4b58      	ldr	r3, [pc, #352]	; (800270c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	461a      	mov	r2, r3
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	ea02 0800 	and.w	r8, r2, r0
 80025c2:	ea03 0901 	and.w	r9, r3, r1
 80025c6:	4640      	mov	r0, r8
 80025c8:	4649      	mov	r1, r9
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	014b      	lsls	r3, r1, #5
 80025d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025d8:	0142      	lsls	r2, r0, #5
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	ebb0 0008 	subs.w	r0, r0, r8
 80025e2:	eb61 0109 	sbc.w	r1, r1, r9
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	018b      	lsls	r3, r1, #6
 80025f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025f4:	0182      	lsls	r2, r0, #6
 80025f6:	1a12      	subs	r2, r2, r0
 80025f8:	eb63 0301 	sbc.w	r3, r3, r1
 80025fc:	f04f 0000 	mov.w	r0, #0
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	00d9      	lsls	r1, r3, #3
 8002606:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800260a:	00d0      	lsls	r0, r2, #3
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	eb12 0208 	adds.w	r2, r2, r8
 8002614:	eb43 0309 	adc.w	r3, r3, r9
 8002618:	f04f 0000 	mov.w	r0, #0
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	0259      	lsls	r1, r3, #9
 8002622:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002626:	0250      	lsls	r0, r2, #9
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	461a      	mov	r2, r3
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	f7fd fe2a 	bl	8000290 <__aeabi_uldivmod>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4613      	mov	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e04a      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	099b      	lsrs	r3, r3, #6
 800264c:	461a      	mov	r2, r3
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	ea02 0400 	and.w	r4, r2, r0
 800265e:	ea03 0501 	and.w	r5, r3, r1
 8002662:	4620      	mov	r0, r4
 8002664:	4629      	mov	r1, r5
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	014b      	lsls	r3, r1, #5
 8002670:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002674:	0142      	lsls	r2, r0, #5
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	1b00      	subs	r0, r0, r4
 800267c:	eb61 0105 	sbc.w	r1, r1, r5
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	018b      	lsls	r3, r1, #6
 800268a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800268e:	0182      	lsls	r2, r0, #6
 8002690:	1a12      	subs	r2, r2, r0
 8002692:	eb63 0301 	sbc.w	r3, r3, r1
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	00d9      	lsls	r1, r3, #3
 80026a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026a4:	00d0      	lsls	r0, r2, #3
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	1912      	adds	r2, r2, r4
 80026ac:	eb45 0303 	adc.w	r3, r5, r3
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	0299      	lsls	r1, r3, #10
 80026ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026be:	0290      	lsls	r0, r2, #10
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	f7fd fdde 	bl	8000290 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	3301      	adds	r3, #1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	60bb      	str	r3, [r7, #8]
      break;
 80026f6:	e002      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026fa:	60bb      	str	r3, [r7, #8]
      break;
 80026fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fe:	68bb      	ldr	r3, [r7, #8]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	08003834 	.word	0x08003834

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	08003834 	.word	0x08003834

08002780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e03f      	b.n	8002812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fc20 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2224      	movs	r2, #36	; 0x24
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f9cb 	bl	8002b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b08a      	sub	sp, #40	; 0x28
 800281e:	af02      	add	r7, sp, #8
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	d17c      	bne.n	8002934 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_UART_Transmit+0x2c>
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e075      	b.n	8002936 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_UART_Transmit+0x3e>
 8002854:	2302      	movs	r3, #2
 8002856:	e06e      	b.n	8002936 <HAL_UART_Transmit+0x11c>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2221      	movs	r2, #33	; 0x21
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286e:	f7fe fd3d 	bl	80012ec <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002888:	d108      	bne.n	800289c <HAL_UART_Transmit+0x82>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e003      	b.n	80028a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028ac:	e02a      	b.n	8002904 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f8e2 	bl	8002a82 <UART_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e036      	b.n	8002936 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	3302      	adds	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e007      	b.n	80028f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1cf      	bne.n	80028ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2140      	movs	r1, #64	; 0x40
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f8b2 	bl	8002a82 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e006      	b.n	8002936 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b08a      	sub	sp, #40	; 0x28
 8002942:	af02      	add	r7, sp, #8
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	f040 808c 	bne.w	8002a78 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_UART_Receive+0x2e>
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e084      	b.n	8002a7a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_UART_Receive+0x40>
 800297a:	2302      	movs	r3, #2
 800297c:	e07d      	b.n	8002a7a <HAL_UART_Receive+0x13c>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2222      	movs	r2, #34	; 0x22
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299a:	f7fe fca7 	bl	80012ec <HAL_GetTick>
 800299e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d108      	bne.n	80029c8 <HAL_UART_Receive+0x8a>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e003      	b.n	80029d0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80029d8:	e043      	b.n	8002a62 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2120      	movs	r1, #32
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f84c 	bl	8002a82 <UART_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e042      	b.n	8002a7a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	3302      	adds	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e01f      	b.n	8002a54 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1c:	d007      	beq.n	8002a2e <HAL_UART_Receive+0xf0>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10a      	bne.n	8002a3c <HAL_UART_Receive+0xfe>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e008      	b.n	8002a4e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1b6      	bne.n	80029da <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b090      	sub	sp, #64	; 0x40
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a92:	e050      	b.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d04c      	beq.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aa2:	f7fe fc23 	bl	80012ec <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d241      	bcs.n	8002b36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ad2:	637a      	str	r2, [r7, #52]	; 0x34
 8002ad4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e5      	bne.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3314      	adds	r3, #20
 8002aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	e853 3f00 	ldrex	r3, [r3]
 8002af4:	613b      	str	r3, [r7, #16]
   return(result);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3314      	adds	r3, #20
 8002b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b06:	623a      	str	r2, [r7, #32]
 8002b08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	69f9      	ldr	r1, [r7, #28]
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e5      	bne.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e00f      	b.n	8002b56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d09f      	beq.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3740      	adds	r7, #64	; 0x40
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b64:	b09f      	sub	sp, #124	; 0x7c
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b76:	68d9      	ldr	r1, [r3, #12]
 8002b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	ea40 0301 	orr.w	r3, r0, r1
 8002b80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	431a      	orrs	r2, r3
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ba4:	f021 010c 	bic.w	r1, r1, #12
 8002ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bbe:	6999      	ldr	r1, [r3, #24]
 8002bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	ea40 0301 	orr.w	r3, r0, r1
 8002bc8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4bc5      	ldr	r3, [pc, #788]	; (8002ee4 <UART_SetConfig+0x384>)
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d004      	beq.n	8002bde <UART_SetConfig+0x7e>
 8002bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4bc3      	ldr	r3, [pc, #780]	; (8002ee8 <UART_SetConfig+0x388>)
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d103      	bne.n	8002be6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bde:	f7ff fdbb 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8002be2:	6778      	str	r0, [r7, #116]	; 0x74
 8002be4:	e002      	b.n	8002bec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002be6:	f7ff fda3 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8002bea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf4:	f040 80b6 	bne.w	8002d64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfa:	461c      	mov	r4, r3
 8002bfc:	f04f 0500 	mov.w	r5, #0
 8002c00:	4622      	mov	r2, r4
 8002c02:	462b      	mov	r3, r5
 8002c04:	1891      	adds	r1, r2, r2
 8002c06:	6439      	str	r1, [r7, #64]	; 0x40
 8002c08:	415b      	adcs	r3, r3
 8002c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c10:	1912      	adds	r2, r2, r4
 8002c12:	eb45 0303 	adc.w	r3, r5, r3
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	00d9      	lsls	r1, r3, #3
 8002c20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c24:	00d0      	lsls	r0, r2, #3
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	1911      	adds	r1, r2, r4
 8002c2c:	6639      	str	r1, [r7, #96]	; 0x60
 8002c2e:	416b      	adcs	r3, r5
 8002c30:	667b      	str	r3, [r7, #100]	; 0x64
 8002c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c40:	415b      	adcs	r3, r3
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c4c:	f7fd fb20 	bl	8000290 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4ba5      	ldr	r3, [pc, #660]	; (8002eec <UART_SetConfig+0x38c>)
 8002c56:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	011e      	lsls	r6, r3, #4
 8002c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c60:	461c      	mov	r4, r3
 8002c62:	f04f 0500 	mov.w	r5, #0
 8002c66:	4622      	mov	r2, r4
 8002c68:	462b      	mov	r3, r5
 8002c6a:	1891      	adds	r1, r2, r2
 8002c6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c6e:	415b      	adcs	r3, r3
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
 8002c72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c76:	1912      	adds	r2, r2, r4
 8002c78:	eb45 0303 	adc.w	r3, r5, r3
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	00d9      	lsls	r1, r3, #3
 8002c86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c8a:	00d0      	lsls	r0, r2, #3
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	1911      	adds	r1, r2, r4
 8002c92:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c94:	416b      	adcs	r3, r5
 8002c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	1891      	adds	r1, r2, r2
 8002ca4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ca6:	415b      	adcs	r3, r3
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002cb2:	f7fd faed 	bl	8000290 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4b8c      	ldr	r3, [pc, #560]	; (8002eec <UART_SetConfig+0x38c>)
 8002cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	2164      	movs	r1, #100	; 0x64
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	3332      	adds	r3, #50	; 0x32
 8002cce:	4a87      	ldr	r2, [pc, #540]	; (8002eec <UART_SetConfig+0x38c>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cdc:	441e      	add	r6, r3
 8002cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	1894      	adds	r4, r2, r2
 8002cec:	623c      	str	r4, [r7, #32]
 8002cee:	415b      	adcs	r3, r3
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cf6:	1812      	adds	r2, r2, r0
 8002cf8:	eb41 0303 	adc.w	r3, r1, r3
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	f04f 0500 	mov.w	r5, #0
 8002d04:	00dd      	lsls	r5, r3, #3
 8002d06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d0a:	00d4      	lsls	r4, r2, #3
 8002d0c:	4622      	mov	r2, r4
 8002d0e:	462b      	mov	r3, r5
 8002d10:	1814      	adds	r4, r2, r0
 8002d12:	653c      	str	r4, [r7, #80]	; 0x50
 8002d14:	414b      	adcs	r3, r1
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
 8002d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	1891      	adds	r1, r2, r2
 8002d24:	61b9      	str	r1, [r7, #24]
 8002d26:	415b      	adcs	r3, r3
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d32:	f7fd faad 	bl	8000290 <__aeabi_uldivmod>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4b6c      	ldr	r3, [pc, #432]	; (8002eec <UART_SetConfig+0x38c>)
 8002d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	2164      	movs	r1, #100	; 0x64
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	3332      	adds	r3, #50	; 0x32
 8002d4e:	4a67      	ldr	r2, [pc, #412]	; (8002eec <UART_SetConfig+0x38c>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	f003 0207 	and.w	r2, r3, #7
 8002d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4432      	add	r2, r6
 8002d60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d62:	e0b9      	b.n	8002ed8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d66:	461c      	mov	r4, r3
 8002d68:	f04f 0500 	mov.w	r5, #0
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	462b      	mov	r3, r5
 8002d70:	1891      	adds	r1, r2, r2
 8002d72:	6139      	str	r1, [r7, #16]
 8002d74:	415b      	adcs	r3, r3
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d7c:	1912      	adds	r2, r2, r4
 8002d7e:	eb45 0303 	adc.w	r3, r5, r3
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	00d9      	lsls	r1, r3, #3
 8002d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d90:	00d0      	lsls	r0, r2, #3
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	eb12 0804 	adds.w	r8, r2, r4
 8002d9a:	eb43 0905 	adc.w	r9, r3, r5
 8002d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f04f 0100 	mov.w	r1, #0
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	008b      	lsls	r3, r1, #2
 8002db2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002db6:	0082      	lsls	r2, r0, #2
 8002db8:	4640      	mov	r0, r8
 8002dba:	4649      	mov	r1, r9
 8002dbc:	f7fd fa68 	bl	8000290 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4b49      	ldr	r3, [pc, #292]	; (8002eec <UART_SetConfig+0x38c>)
 8002dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	011e      	lsls	r6, r3, #4
 8002dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	1894      	adds	r4, r2, r2
 8002ddc:	60bc      	str	r4, [r7, #8]
 8002dde:	415b      	adcs	r3, r3
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002de6:	1812      	adds	r2, r2, r0
 8002de8:	eb41 0303 	adc.w	r3, r1, r3
 8002dec:	f04f 0400 	mov.w	r4, #0
 8002df0:	f04f 0500 	mov.w	r5, #0
 8002df4:	00dd      	lsls	r5, r3, #3
 8002df6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dfa:	00d4      	lsls	r4, r2, #3
 8002dfc:	4622      	mov	r2, r4
 8002dfe:	462b      	mov	r3, r5
 8002e00:	1814      	adds	r4, r2, r0
 8002e02:	64bc      	str	r4, [r7, #72]	; 0x48
 8002e04:	414b      	adcs	r3, r1
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	008b      	lsls	r3, r1, #2
 8002e1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e20:	0082      	lsls	r2, r0, #2
 8002e22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e26:	f7fd fa33 	bl	8000290 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <UART_SetConfig+0x38c>)
 8002e30:	fba3 1302 	umull	r1, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	2164      	movs	r1, #100	; 0x64
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	3332      	adds	r3, #50	; 0x32
 8002e42:	4a2a      	ldr	r2, [pc, #168]	; (8002eec <UART_SetConfig+0x38c>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4e:	441e      	add	r6, r3
 8002e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e52:	4618      	mov	r0, r3
 8002e54:	f04f 0100 	mov.w	r1, #0
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	1894      	adds	r4, r2, r2
 8002e5e:	603c      	str	r4, [r7, #0]
 8002e60:	415b      	adcs	r3, r3
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e68:	1812      	adds	r2, r2, r0
 8002e6a:	eb41 0303 	adc.w	r3, r1, r3
 8002e6e:	f04f 0400 	mov.w	r4, #0
 8002e72:	f04f 0500 	mov.w	r5, #0
 8002e76:	00dd      	lsls	r5, r3, #3
 8002e78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e7c:	00d4      	lsls	r4, r2, #3
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	eb12 0a00 	adds.w	sl, r2, r0
 8002e86:	eb43 0b01 	adc.w	fp, r3, r1
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	008b      	lsls	r3, r1, #2
 8002e9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ea2:	0082      	lsls	r2, r0, #2
 8002ea4:	4650      	mov	r0, sl
 8002ea6:	4659      	mov	r1, fp
 8002ea8:	f7fd f9f2 	bl	8000290 <__aeabi_uldivmod>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <UART_SetConfig+0x38c>)
 8002eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2164      	movs	r1, #100	; 0x64
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	3332      	adds	r3, #50	; 0x32
 8002ec4:	4a09      	ldr	r2, [pc, #36]	; (8002eec <UART_SetConfig+0x38c>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	f003 020f 	and.w	r2, r3, #15
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4432      	add	r2, r6
 8002ed6:	609a      	str	r2, [r3, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	377c      	adds	r7, #124	; 0x7c
 8002edc:	46bd      	mov	sp, r7
 8002ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40011000 	.word	0x40011000
 8002ee8:	40011400 	.word	0x40011400
 8002eec:	51eb851f 	.word	0x51eb851f

08002ef0 <__errno>:
 8002ef0:	4b01      	ldr	r3, [pc, #4]	; (8002ef8 <__errno+0x8>)
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	2000000c 	.word	0x2000000c

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4d0d      	ldr	r5, [pc, #52]	; (8002f34 <__libc_init_array+0x38>)
 8002f00:	4c0d      	ldr	r4, [pc, #52]	; (8002f38 <__libc_init_array+0x3c>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	2600      	movs	r6, #0
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	4d0b      	ldr	r5, [pc, #44]	; (8002f3c <__libc_init_array+0x40>)
 8002f0e:	4c0c      	ldr	r4, [pc, #48]	; (8002f40 <__libc_init_array+0x44>)
 8002f10:	f000 fc4e 	bl	80037b0 <_init>
 8002f14:	1b64      	subs	r4, r4, r5
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	2600      	movs	r6, #0
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	08003878 	.word	0x08003878
 8002f38:	08003878 	.word	0x08003878
 8002f3c:	08003878 	.word	0x08003878
 8002f40:	0800387c 	.word	0x0800387c

08002f44 <memset>:
 8002f44:	4402      	add	r2, r0
 8002f46:	4603      	mov	r3, r0
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d100      	bne.n	8002f4e <memset+0xa>
 8002f4c:	4770      	bx	lr
 8002f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f52:	e7f9      	b.n	8002f48 <memset+0x4>

08002f54 <_vsiprintf_r>:
 8002f54:	b500      	push	{lr}
 8002f56:	b09b      	sub	sp, #108	; 0x6c
 8002f58:	9100      	str	r1, [sp, #0]
 8002f5a:	9104      	str	r1, [sp, #16]
 8002f5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f60:	9105      	str	r1, [sp, #20]
 8002f62:	9102      	str	r1, [sp, #8]
 8002f64:	4905      	ldr	r1, [pc, #20]	; (8002f7c <_vsiprintf_r+0x28>)
 8002f66:	9103      	str	r1, [sp, #12]
 8002f68:	4669      	mov	r1, sp
 8002f6a:	f000 f86f 	bl	800304c <_svfiprintf_r>
 8002f6e:	9b00      	ldr	r3, [sp, #0]
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	b01b      	add	sp, #108	; 0x6c
 8002f76:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f7a:	bf00      	nop
 8002f7c:	ffff0208 	.word	0xffff0208

08002f80 <vsiprintf>:
 8002f80:	4613      	mov	r3, r2
 8002f82:	460a      	mov	r2, r1
 8002f84:	4601      	mov	r1, r0
 8002f86:	4802      	ldr	r0, [pc, #8]	; (8002f90 <vsiprintf+0x10>)
 8002f88:	6800      	ldr	r0, [r0, #0]
 8002f8a:	f7ff bfe3 	b.w	8002f54 <_vsiprintf_r>
 8002f8e:	bf00      	nop
 8002f90:	2000000c 	.word	0x2000000c

08002f94 <__ssputs_r>:
 8002f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f98:	688e      	ldr	r6, [r1, #8]
 8002f9a:	429e      	cmp	r6, r3
 8002f9c:	4682      	mov	sl, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	4690      	mov	r8, r2
 8002fa2:	461f      	mov	r7, r3
 8002fa4:	d838      	bhi.n	8003018 <__ssputs_r+0x84>
 8002fa6:	898a      	ldrh	r2, [r1, #12]
 8002fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fac:	d032      	beq.n	8003014 <__ssputs_r+0x80>
 8002fae:	6825      	ldr	r5, [r4, #0]
 8002fb0:	6909      	ldr	r1, [r1, #16]
 8002fb2:	eba5 0901 	sub.w	r9, r5, r1
 8002fb6:	6965      	ldr	r5, [r4, #20]
 8002fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	444b      	add	r3, r9
 8002fc4:	106d      	asrs	r5, r5, #1
 8002fc6:	429d      	cmp	r5, r3
 8002fc8:	bf38      	it	cc
 8002fca:	461d      	movcc	r5, r3
 8002fcc:	0553      	lsls	r3, r2, #21
 8002fce:	d531      	bpl.n	8003034 <__ssputs_r+0xa0>
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	f000 fb47 	bl	8003664 <_malloc_r>
 8002fd6:	4606      	mov	r6, r0
 8002fd8:	b950      	cbnz	r0, 8002ff0 <__ssputs_r+0x5c>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	f8ca 3000 	str.w	r3, [sl]
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe6:	81a3      	strh	r3, [r4, #12]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff0:	6921      	ldr	r1, [r4, #16]
 8002ff2:	464a      	mov	r2, r9
 8002ff4:	f000 fabe 	bl	8003574 <memcpy>
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003002:	81a3      	strh	r3, [r4, #12]
 8003004:	6126      	str	r6, [r4, #16]
 8003006:	6165      	str	r5, [r4, #20]
 8003008:	444e      	add	r6, r9
 800300a:	eba5 0509 	sub.w	r5, r5, r9
 800300e:	6026      	str	r6, [r4, #0]
 8003010:	60a5      	str	r5, [r4, #8]
 8003012:	463e      	mov	r6, r7
 8003014:	42be      	cmp	r6, r7
 8003016:	d900      	bls.n	800301a <__ssputs_r+0x86>
 8003018:	463e      	mov	r6, r7
 800301a:	4632      	mov	r2, r6
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	4641      	mov	r1, r8
 8003020:	f000 fab6 	bl	8003590 <memmove>
 8003024:	68a3      	ldr	r3, [r4, #8]
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	1b9b      	subs	r3, r3, r6
 800302a:	4432      	add	r2, r6
 800302c:	60a3      	str	r3, [r4, #8]
 800302e:	6022      	str	r2, [r4, #0]
 8003030:	2000      	movs	r0, #0
 8003032:	e7db      	b.n	8002fec <__ssputs_r+0x58>
 8003034:	462a      	mov	r2, r5
 8003036:	f000 fb6f 	bl	8003718 <_realloc_r>
 800303a:	4606      	mov	r6, r0
 800303c:	2800      	cmp	r0, #0
 800303e:	d1e1      	bne.n	8003004 <__ssputs_r+0x70>
 8003040:	6921      	ldr	r1, [r4, #16]
 8003042:	4650      	mov	r0, sl
 8003044:	f000 fabe 	bl	80035c4 <_free_r>
 8003048:	e7c7      	b.n	8002fda <__ssputs_r+0x46>
	...

0800304c <_svfiprintf_r>:
 800304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003050:	4698      	mov	r8, r3
 8003052:	898b      	ldrh	r3, [r1, #12]
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	b09d      	sub	sp, #116	; 0x74
 8003058:	4607      	mov	r7, r0
 800305a:	460d      	mov	r5, r1
 800305c:	4614      	mov	r4, r2
 800305e:	d50e      	bpl.n	800307e <_svfiprintf_r+0x32>
 8003060:	690b      	ldr	r3, [r1, #16]
 8003062:	b963      	cbnz	r3, 800307e <_svfiprintf_r+0x32>
 8003064:	2140      	movs	r1, #64	; 0x40
 8003066:	f000 fafd 	bl	8003664 <_malloc_r>
 800306a:	6028      	str	r0, [r5, #0]
 800306c:	6128      	str	r0, [r5, #16]
 800306e:	b920      	cbnz	r0, 800307a <_svfiprintf_r+0x2e>
 8003070:	230c      	movs	r3, #12
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	e0d1      	b.n	800321e <_svfiprintf_r+0x1d2>
 800307a:	2340      	movs	r3, #64	; 0x40
 800307c:	616b      	str	r3, [r5, #20]
 800307e:	2300      	movs	r3, #0
 8003080:	9309      	str	r3, [sp, #36]	; 0x24
 8003082:	2320      	movs	r3, #32
 8003084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003088:	f8cd 800c 	str.w	r8, [sp, #12]
 800308c:	2330      	movs	r3, #48	; 0x30
 800308e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003238 <_svfiprintf_r+0x1ec>
 8003092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003096:	f04f 0901 	mov.w	r9, #1
 800309a:	4623      	mov	r3, r4
 800309c:	469a      	mov	sl, r3
 800309e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030a2:	b10a      	cbz	r2, 80030a8 <_svfiprintf_r+0x5c>
 80030a4:	2a25      	cmp	r2, #37	; 0x25
 80030a6:	d1f9      	bne.n	800309c <_svfiprintf_r+0x50>
 80030a8:	ebba 0b04 	subs.w	fp, sl, r4
 80030ac:	d00b      	beq.n	80030c6 <_svfiprintf_r+0x7a>
 80030ae:	465b      	mov	r3, fp
 80030b0:	4622      	mov	r2, r4
 80030b2:	4629      	mov	r1, r5
 80030b4:	4638      	mov	r0, r7
 80030b6:	f7ff ff6d 	bl	8002f94 <__ssputs_r>
 80030ba:	3001      	adds	r0, #1
 80030bc:	f000 80aa 	beq.w	8003214 <_svfiprintf_r+0x1c8>
 80030c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030c2:	445a      	add	r2, fp
 80030c4:	9209      	str	r2, [sp, #36]	; 0x24
 80030c6:	f89a 3000 	ldrb.w	r3, [sl]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80a2 	beq.w	8003214 <_svfiprintf_r+0x1c8>
 80030d0:	2300      	movs	r3, #0
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295
 80030d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030da:	f10a 0a01 	add.w	sl, sl, #1
 80030de:	9304      	str	r3, [sp, #16]
 80030e0:	9307      	str	r3, [sp, #28]
 80030e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030e6:	931a      	str	r3, [sp, #104]	; 0x68
 80030e8:	4654      	mov	r4, sl
 80030ea:	2205      	movs	r2, #5
 80030ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f0:	4851      	ldr	r0, [pc, #324]	; (8003238 <_svfiprintf_r+0x1ec>)
 80030f2:	f7fd f87d 	bl	80001f0 <memchr>
 80030f6:	9a04      	ldr	r2, [sp, #16]
 80030f8:	b9d8      	cbnz	r0, 8003132 <_svfiprintf_r+0xe6>
 80030fa:	06d0      	lsls	r0, r2, #27
 80030fc:	bf44      	itt	mi
 80030fe:	2320      	movmi	r3, #32
 8003100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003104:	0711      	lsls	r1, r2, #28
 8003106:	bf44      	itt	mi
 8003108:	232b      	movmi	r3, #43	; 0x2b
 800310a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800310e:	f89a 3000 	ldrb.w	r3, [sl]
 8003112:	2b2a      	cmp	r3, #42	; 0x2a
 8003114:	d015      	beq.n	8003142 <_svfiprintf_r+0xf6>
 8003116:	9a07      	ldr	r2, [sp, #28]
 8003118:	4654      	mov	r4, sl
 800311a:	2000      	movs	r0, #0
 800311c:	f04f 0c0a 	mov.w	ip, #10
 8003120:	4621      	mov	r1, r4
 8003122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003126:	3b30      	subs	r3, #48	; 0x30
 8003128:	2b09      	cmp	r3, #9
 800312a:	d94e      	bls.n	80031ca <_svfiprintf_r+0x17e>
 800312c:	b1b0      	cbz	r0, 800315c <_svfiprintf_r+0x110>
 800312e:	9207      	str	r2, [sp, #28]
 8003130:	e014      	b.n	800315c <_svfiprintf_r+0x110>
 8003132:	eba0 0308 	sub.w	r3, r0, r8
 8003136:	fa09 f303 	lsl.w	r3, r9, r3
 800313a:	4313      	orrs	r3, r2
 800313c:	9304      	str	r3, [sp, #16]
 800313e:	46a2      	mov	sl, r4
 8003140:	e7d2      	b.n	80030e8 <_svfiprintf_r+0x9c>
 8003142:	9b03      	ldr	r3, [sp, #12]
 8003144:	1d19      	adds	r1, r3, #4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	9103      	str	r1, [sp, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	bfbb      	ittet	lt
 800314e:	425b      	neglt	r3, r3
 8003150:	f042 0202 	orrlt.w	r2, r2, #2
 8003154:	9307      	strge	r3, [sp, #28]
 8003156:	9307      	strlt	r3, [sp, #28]
 8003158:	bfb8      	it	lt
 800315a:	9204      	strlt	r2, [sp, #16]
 800315c:	7823      	ldrb	r3, [r4, #0]
 800315e:	2b2e      	cmp	r3, #46	; 0x2e
 8003160:	d10c      	bne.n	800317c <_svfiprintf_r+0x130>
 8003162:	7863      	ldrb	r3, [r4, #1]
 8003164:	2b2a      	cmp	r3, #42	; 0x2a
 8003166:	d135      	bne.n	80031d4 <_svfiprintf_r+0x188>
 8003168:	9b03      	ldr	r3, [sp, #12]
 800316a:	1d1a      	adds	r2, r3, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	9203      	str	r2, [sp, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	bfb8      	it	lt
 8003174:	f04f 33ff 	movlt.w	r3, #4294967295
 8003178:	3402      	adds	r4, #2
 800317a:	9305      	str	r3, [sp, #20]
 800317c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003248 <_svfiprintf_r+0x1fc>
 8003180:	7821      	ldrb	r1, [r4, #0]
 8003182:	2203      	movs	r2, #3
 8003184:	4650      	mov	r0, sl
 8003186:	f7fd f833 	bl	80001f0 <memchr>
 800318a:	b140      	cbz	r0, 800319e <_svfiprintf_r+0x152>
 800318c:	2340      	movs	r3, #64	; 0x40
 800318e:	eba0 000a 	sub.w	r0, r0, sl
 8003192:	fa03 f000 	lsl.w	r0, r3, r0
 8003196:	9b04      	ldr	r3, [sp, #16]
 8003198:	4303      	orrs	r3, r0
 800319a:	3401      	adds	r4, #1
 800319c:	9304      	str	r3, [sp, #16]
 800319e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a2:	4826      	ldr	r0, [pc, #152]	; (800323c <_svfiprintf_r+0x1f0>)
 80031a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031a8:	2206      	movs	r2, #6
 80031aa:	f7fd f821 	bl	80001f0 <memchr>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d038      	beq.n	8003224 <_svfiprintf_r+0x1d8>
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <_svfiprintf_r+0x1f4>)
 80031b4:	bb1b      	cbnz	r3, 80031fe <_svfiprintf_r+0x1b2>
 80031b6:	9b03      	ldr	r3, [sp, #12]
 80031b8:	3307      	adds	r3, #7
 80031ba:	f023 0307 	bic.w	r3, r3, #7
 80031be:	3308      	adds	r3, #8
 80031c0:	9303      	str	r3, [sp, #12]
 80031c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031c4:	4433      	add	r3, r6
 80031c6:	9309      	str	r3, [sp, #36]	; 0x24
 80031c8:	e767      	b.n	800309a <_svfiprintf_r+0x4e>
 80031ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80031ce:	460c      	mov	r4, r1
 80031d0:	2001      	movs	r0, #1
 80031d2:	e7a5      	b.n	8003120 <_svfiprintf_r+0xd4>
 80031d4:	2300      	movs	r3, #0
 80031d6:	3401      	adds	r4, #1
 80031d8:	9305      	str	r3, [sp, #20]
 80031da:	4619      	mov	r1, r3
 80031dc:	f04f 0c0a 	mov.w	ip, #10
 80031e0:	4620      	mov	r0, r4
 80031e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031e6:	3a30      	subs	r2, #48	; 0x30
 80031e8:	2a09      	cmp	r2, #9
 80031ea:	d903      	bls.n	80031f4 <_svfiprintf_r+0x1a8>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0c5      	beq.n	800317c <_svfiprintf_r+0x130>
 80031f0:	9105      	str	r1, [sp, #20]
 80031f2:	e7c3      	b.n	800317c <_svfiprintf_r+0x130>
 80031f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80031f8:	4604      	mov	r4, r0
 80031fa:	2301      	movs	r3, #1
 80031fc:	e7f0      	b.n	80031e0 <_svfiprintf_r+0x194>
 80031fe:	ab03      	add	r3, sp, #12
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	462a      	mov	r2, r5
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <_svfiprintf_r+0x1f8>)
 8003206:	a904      	add	r1, sp, #16
 8003208:	4638      	mov	r0, r7
 800320a:	f3af 8000 	nop.w
 800320e:	1c42      	adds	r2, r0, #1
 8003210:	4606      	mov	r6, r0
 8003212:	d1d6      	bne.n	80031c2 <_svfiprintf_r+0x176>
 8003214:	89ab      	ldrh	r3, [r5, #12]
 8003216:	065b      	lsls	r3, r3, #25
 8003218:	f53f af2c 	bmi.w	8003074 <_svfiprintf_r+0x28>
 800321c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800321e:	b01d      	add	sp, #116	; 0x74
 8003220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003224:	ab03      	add	r3, sp, #12
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	462a      	mov	r2, r5
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <_svfiprintf_r+0x1f8>)
 800322c:	a904      	add	r1, sp, #16
 800322e:	4638      	mov	r0, r7
 8003230:	f000 f87a 	bl	8003328 <_printf_i>
 8003234:	e7eb      	b.n	800320e <_svfiprintf_r+0x1c2>
 8003236:	bf00      	nop
 8003238:	0800383c 	.word	0x0800383c
 800323c:	08003846 	.word	0x08003846
 8003240:	00000000 	.word	0x00000000
 8003244:	08002f95 	.word	0x08002f95
 8003248:	08003842 	.word	0x08003842

0800324c <_printf_common>:
 800324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003250:	4616      	mov	r6, r2
 8003252:	4699      	mov	r9, r3
 8003254:	688a      	ldr	r2, [r1, #8]
 8003256:	690b      	ldr	r3, [r1, #16]
 8003258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800325c:	4293      	cmp	r3, r2
 800325e:	bfb8      	it	lt
 8003260:	4613      	movlt	r3, r2
 8003262:	6033      	str	r3, [r6, #0]
 8003264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003268:	4607      	mov	r7, r0
 800326a:	460c      	mov	r4, r1
 800326c:	b10a      	cbz	r2, 8003272 <_printf_common+0x26>
 800326e:	3301      	adds	r3, #1
 8003270:	6033      	str	r3, [r6, #0]
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	0699      	lsls	r1, r3, #26
 8003276:	bf42      	ittt	mi
 8003278:	6833      	ldrmi	r3, [r6, #0]
 800327a:	3302      	addmi	r3, #2
 800327c:	6033      	strmi	r3, [r6, #0]
 800327e:	6825      	ldr	r5, [r4, #0]
 8003280:	f015 0506 	ands.w	r5, r5, #6
 8003284:	d106      	bne.n	8003294 <_printf_common+0x48>
 8003286:	f104 0a19 	add.w	sl, r4, #25
 800328a:	68e3      	ldr	r3, [r4, #12]
 800328c:	6832      	ldr	r2, [r6, #0]
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	42ab      	cmp	r3, r5
 8003292:	dc26      	bgt.n	80032e2 <_printf_common+0x96>
 8003294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003298:	1e13      	subs	r3, r2, #0
 800329a:	6822      	ldr	r2, [r4, #0]
 800329c:	bf18      	it	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	0692      	lsls	r2, r2, #26
 80032a2:	d42b      	bmi.n	80032fc <_printf_common+0xb0>
 80032a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032a8:	4649      	mov	r1, r9
 80032aa:	4638      	mov	r0, r7
 80032ac:	47c0      	blx	r8
 80032ae:	3001      	adds	r0, #1
 80032b0:	d01e      	beq.n	80032f0 <_printf_common+0xa4>
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	68e5      	ldr	r5, [r4, #12]
 80032b6:	6832      	ldr	r2, [r6, #0]
 80032b8:	f003 0306 	and.w	r3, r3, #6
 80032bc:	2b04      	cmp	r3, #4
 80032be:	bf08      	it	eq
 80032c0:	1aad      	subeq	r5, r5, r2
 80032c2:	68a3      	ldr	r3, [r4, #8]
 80032c4:	6922      	ldr	r2, [r4, #16]
 80032c6:	bf0c      	ite	eq
 80032c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032cc:	2500      	movne	r5, #0
 80032ce:	4293      	cmp	r3, r2
 80032d0:	bfc4      	itt	gt
 80032d2:	1a9b      	subgt	r3, r3, r2
 80032d4:	18ed      	addgt	r5, r5, r3
 80032d6:	2600      	movs	r6, #0
 80032d8:	341a      	adds	r4, #26
 80032da:	42b5      	cmp	r5, r6
 80032dc:	d11a      	bne.n	8003314 <_printf_common+0xc8>
 80032de:	2000      	movs	r0, #0
 80032e0:	e008      	b.n	80032f4 <_printf_common+0xa8>
 80032e2:	2301      	movs	r3, #1
 80032e4:	4652      	mov	r2, sl
 80032e6:	4649      	mov	r1, r9
 80032e8:	4638      	mov	r0, r7
 80032ea:	47c0      	blx	r8
 80032ec:	3001      	adds	r0, #1
 80032ee:	d103      	bne.n	80032f8 <_printf_common+0xac>
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f8:	3501      	adds	r5, #1
 80032fa:	e7c6      	b.n	800328a <_printf_common+0x3e>
 80032fc:	18e1      	adds	r1, r4, r3
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	2030      	movs	r0, #48	; 0x30
 8003302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003306:	4422      	add	r2, r4
 8003308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800330c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003310:	3302      	adds	r3, #2
 8003312:	e7c7      	b.n	80032a4 <_printf_common+0x58>
 8003314:	2301      	movs	r3, #1
 8003316:	4622      	mov	r2, r4
 8003318:	4649      	mov	r1, r9
 800331a:	4638      	mov	r0, r7
 800331c:	47c0      	blx	r8
 800331e:	3001      	adds	r0, #1
 8003320:	d0e6      	beq.n	80032f0 <_printf_common+0xa4>
 8003322:	3601      	adds	r6, #1
 8003324:	e7d9      	b.n	80032da <_printf_common+0x8e>
	...

08003328 <_printf_i>:
 8003328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800332c:	460c      	mov	r4, r1
 800332e:	4691      	mov	r9, r2
 8003330:	7e27      	ldrb	r7, [r4, #24]
 8003332:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003334:	2f78      	cmp	r7, #120	; 0x78
 8003336:	4680      	mov	r8, r0
 8003338:	469a      	mov	sl, r3
 800333a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800333e:	d807      	bhi.n	8003350 <_printf_i+0x28>
 8003340:	2f62      	cmp	r7, #98	; 0x62
 8003342:	d80a      	bhi.n	800335a <_printf_i+0x32>
 8003344:	2f00      	cmp	r7, #0
 8003346:	f000 80d8 	beq.w	80034fa <_printf_i+0x1d2>
 800334a:	2f58      	cmp	r7, #88	; 0x58
 800334c:	f000 80a3 	beq.w	8003496 <_printf_i+0x16e>
 8003350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003358:	e03a      	b.n	80033d0 <_printf_i+0xa8>
 800335a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800335e:	2b15      	cmp	r3, #21
 8003360:	d8f6      	bhi.n	8003350 <_printf_i+0x28>
 8003362:	a001      	add	r0, pc, #4	; (adr r0, 8003368 <_printf_i+0x40>)
 8003364:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003368:	080033c1 	.word	0x080033c1
 800336c:	080033d5 	.word	0x080033d5
 8003370:	08003351 	.word	0x08003351
 8003374:	08003351 	.word	0x08003351
 8003378:	08003351 	.word	0x08003351
 800337c:	08003351 	.word	0x08003351
 8003380:	080033d5 	.word	0x080033d5
 8003384:	08003351 	.word	0x08003351
 8003388:	08003351 	.word	0x08003351
 800338c:	08003351 	.word	0x08003351
 8003390:	08003351 	.word	0x08003351
 8003394:	080034e1 	.word	0x080034e1
 8003398:	08003405 	.word	0x08003405
 800339c:	080034c3 	.word	0x080034c3
 80033a0:	08003351 	.word	0x08003351
 80033a4:	08003351 	.word	0x08003351
 80033a8:	08003503 	.word	0x08003503
 80033ac:	08003351 	.word	0x08003351
 80033b0:	08003405 	.word	0x08003405
 80033b4:	08003351 	.word	0x08003351
 80033b8:	08003351 	.word	0x08003351
 80033bc:	080034cb 	.word	0x080034cb
 80033c0:	680b      	ldr	r3, [r1, #0]
 80033c2:	1d1a      	adds	r2, r3, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	600a      	str	r2, [r1, #0]
 80033c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0a3      	b.n	800351c <_printf_i+0x1f4>
 80033d4:	6825      	ldr	r5, [r4, #0]
 80033d6:	6808      	ldr	r0, [r1, #0]
 80033d8:	062e      	lsls	r6, r5, #24
 80033da:	f100 0304 	add.w	r3, r0, #4
 80033de:	d50a      	bpl.n	80033f6 <_printf_i+0xce>
 80033e0:	6805      	ldr	r5, [r0, #0]
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	2d00      	cmp	r5, #0
 80033e6:	da03      	bge.n	80033f0 <_printf_i+0xc8>
 80033e8:	232d      	movs	r3, #45	; 0x2d
 80033ea:	426d      	negs	r5, r5
 80033ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033f0:	485e      	ldr	r0, [pc, #376]	; (800356c <_printf_i+0x244>)
 80033f2:	230a      	movs	r3, #10
 80033f4:	e019      	b.n	800342a <_printf_i+0x102>
 80033f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033fa:	6805      	ldr	r5, [r0, #0]
 80033fc:	600b      	str	r3, [r1, #0]
 80033fe:	bf18      	it	ne
 8003400:	b22d      	sxthne	r5, r5
 8003402:	e7ef      	b.n	80033e4 <_printf_i+0xbc>
 8003404:	680b      	ldr	r3, [r1, #0]
 8003406:	6825      	ldr	r5, [r4, #0]
 8003408:	1d18      	adds	r0, r3, #4
 800340a:	6008      	str	r0, [r1, #0]
 800340c:	0628      	lsls	r0, r5, #24
 800340e:	d501      	bpl.n	8003414 <_printf_i+0xec>
 8003410:	681d      	ldr	r5, [r3, #0]
 8003412:	e002      	b.n	800341a <_printf_i+0xf2>
 8003414:	0669      	lsls	r1, r5, #25
 8003416:	d5fb      	bpl.n	8003410 <_printf_i+0xe8>
 8003418:	881d      	ldrh	r5, [r3, #0]
 800341a:	4854      	ldr	r0, [pc, #336]	; (800356c <_printf_i+0x244>)
 800341c:	2f6f      	cmp	r7, #111	; 0x6f
 800341e:	bf0c      	ite	eq
 8003420:	2308      	moveq	r3, #8
 8003422:	230a      	movne	r3, #10
 8003424:	2100      	movs	r1, #0
 8003426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800342a:	6866      	ldr	r6, [r4, #4]
 800342c:	60a6      	str	r6, [r4, #8]
 800342e:	2e00      	cmp	r6, #0
 8003430:	bfa2      	ittt	ge
 8003432:	6821      	ldrge	r1, [r4, #0]
 8003434:	f021 0104 	bicge.w	r1, r1, #4
 8003438:	6021      	strge	r1, [r4, #0]
 800343a:	b90d      	cbnz	r5, 8003440 <_printf_i+0x118>
 800343c:	2e00      	cmp	r6, #0
 800343e:	d04d      	beq.n	80034dc <_printf_i+0x1b4>
 8003440:	4616      	mov	r6, r2
 8003442:	fbb5 f1f3 	udiv	r1, r5, r3
 8003446:	fb03 5711 	mls	r7, r3, r1, r5
 800344a:	5dc7      	ldrb	r7, [r0, r7]
 800344c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003450:	462f      	mov	r7, r5
 8003452:	42bb      	cmp	r3, r7
 8003454:	460d      	mov	r5, r1
 8003456:	d9f4      	bls.n	8003442 <_printf_i+0x11a>
 8003458:	2b08      	cmp	r3, #8
 800345a:	d10b      	bne.n	8003474 <_printf_i+0x14c>
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	07df      	lsls	r7, r3, #31
 8003460:	d508      	bpl.n	8003474 <_printf_i+0x14c>
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	6861      	ldr	r1, [r4, #4]
 8003466:	4299      	cmp	r1, r3
 8003468:	bfde      	ittt	le
 800346a:	2330      	movle	r3, #48	; 0x30
 800346c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003470:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003474:	1b92      	subs	r2, r2, r6
 8003476:	6122      	str	r2, [r4, #16]
 8003478:	f8cd a000 	str.w	sl, [sp]
 800347c:	464b      	mov	r3, r9
 800347e:	aa03      	add	r2, sp, #12
 8003480:	4621      	mov	r1, r4
 8003482:	4640      	mov	r0, r8
 8003484:	f7ff fee2 	bl	800324c <_printf_common>
 8003488:	3001      	adds	r0, #1
 800348a:	d14c      	bne.n	8003526 <_printf_i+0x1fe>
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	b004      	add	sp, #16
 8003492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003496:	4835      	ldr	r0, [pc, #212]	; (800356c <_printf_i+0x244>)
 8003498:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	680e      	ldr	r6, [r1, #0]
 80034a0:	061f      	lsls	r7, r3, #24
 80034a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80034a6:	600e      	str	r6, [r1, #0]
 80034a8:	d514      	bpl.n	80034d4 <_printf_i+0x1ac>
 80034aa:	07d9      	lsls	r1, r3, #31
 80034ac:	bf44      	itt	mi
 80034ae:	f043 0320 	orrmi.w	r3, r3, #32
 80034b2:	6023      	strmi	r3, [r4, #0]
 80034b4:	b91d      	cbnz	r5, 80034be <_printf_i+0x196>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	f023 0320 	bic.w	r3, r3, #32
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	2310      	movs	r3, #16
 80034c0:	e7b0      	b.n	8003424 <_printf_i+0xfc>
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	f043 0320 	orr.w	r3, r3, #32
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	2378      	movs	r3, #120	; 0x78
 80034cc:	4828      	ldr	r0, [pc, #160]	; (8003570 <_printf_i+0x248>)
 80034ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034d2:	e7e3      	b.n	800349c <_printf_i+0x174>
 80034d4:	065e      	lsls	r6, r3, #25
 80034d6:	bf48      	it	mi
 80034d8:	b2ad      	uxthmi	r5, r5
 80034da:	e7e6      	b.n	80034aa <_printf_i+0x182>
 80034dc:	4616      	mov	r6, r2
 80034de:	e7bb      	b.n	8003458 <_printf_i+0x130>
 80034e0:	680b      	ldr	r3, [r1, #0]
 80034e2:	6826      	ldr	r6, [r4, #0]
 80034e4:	6960      	ldr	r0, [r4, #20]
 80034e6:	1d1d      	adds	r5, r3, #4
 80034e8:	600d      	str	r5, [r1, #0]
 80034ea:	0635      	lsls	r5, r6, #24
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	d501      	bpl.n	80034f4 <_printf_i+0x1cc>
 80034f0:	6018      	str	r0, [r3, #0]
 80034f2:	e002      	b.n	80034fa <_printf_i+0x1d2>
 80034f4:	0671      	lsls	r1, r6, #25
 80034f6:	d5fb      	bpl.n	80034f0 <_printf_i+0x1c8>
 80034f8:	8018      	strh	r0, [r3, #0]
 80034fa:	2300      	movs	r3, #0
 80034fc:	6123      	str	r3, [r4, #16]
 80034fe:	4616      	mov	r6, r2
 8003500:	e7ba      	b.n	8003478 <_printf_i+0x150>
 8003502:	680b      	ldr	r3, [r1, #0]
 8003504:	1d1a      	adds	r2, r3, #4
 8003506:	600a      	str	r2, [r1, #0]
 8003508:	681e      	ldr	r6, [r3, #0]
 800350a:	6862      	ldr	r2, [r4, #4]
 800350c:	2100      	movs	r1, #0
 800350e:	4630      	mov	r0, r6
 8003510:	f7fc fe6e 	bl	80001f0 <memchr>
 8003514:	b108      	cbz	r0, 800351a <_printf_i+0x1f2>
 8003516:	1b80      	subs	r0, r0, r6
 8003518:	6060      	str	r0, [r4, #4]
 800351a:	6863      	ldr	r3, [r4, #4]
 800351c:	6123      	str	r3, [r4, #16]
 800351e:	2300      	movs	r3, #0
 8003520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003524:	e7a8      	b.n	8003478 <_printf_i+0x150>
 8003526:	6923      	ldr	r3, [r4, #16]
 8003528:	4632      	mov	r2, r6
 800352a:	4649      	mov	r1, r9
 800352c:	4640      	mov	r0, r8
 800352e:	47d0      	blx	sl
 8003530:	3001      	adds	r0, #1
 8003532:	d0ab      	beq.n	800348c <_printf_i+0x164>
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	079b      	lsls	r3, r3, #30
 8003538:	d413      	bmi.n	8003562 <_printf_i+0x23a>
 800353a:	68e0      	ldr	r0, [r4, #12]
 800353c:	9b03      	ldr	r3, [sp, #12]
 800353e:	4298      	cmp	r0, r3
 8003540:	bfb8      	it	lt
 8003542:	4618      	movlt	r0, r3
 8003544:	e7a4      	b.n	8003490 <_printf_i+0x168>
 8003546:	2301      	movs	r3, #1
 8003548:	4632      	mov	r2, r6
 800354a:	4649      	mov	r1, r9
 800354c:	4640      	mov	r0, r8
 800354e:	47d0      	blx	sl
 8003550:	3001      	adds	r0, #1
 8003552:	d09b      	beq.n	800348c <_printf_i+0x164>
 8003554:	3501      	adds	r5, #1
 8003556:	68e3      	ldr	r3, [r4, #12]
 8003558:	9903      	ldr	r1, [sp, #12]
 800355a:	1a5b      	subs	r3, r3, r1
 800355c:	42ab      	cmp	r3, r5
 800355e:	dcf2      	bgt.n	8003546 <_printf_i+0x21e>
 8003560:	e7eb      	b.n	800353a <_printf_i+0x212>
 8003562:	2500      	movs	r5, #0
 8003564:	f104 0619 	add.w	r6, r4, #25
 8003568:	e7f5      	b.n	8003556 <_printf_i+0x22e>
 800356a:	bf00      	nop
 800356c:	0800384d 	.word	0x0800384d
 8003570:	0800385e 	.word	0x0800385e

08003574 <memcpy>:
 8003574:	440a      	add	r2, r1
 8003576:	4291      	cmp	r1, r2
 8003578:	f100 33ff 	add.w	r3, r0, #4294967295
 800357c:	d100      	bne.n	8003580 <memcpy+0xc>
 800357e:	4770      	bx	lr
 8003580:	b510      	push	{r4, lr}
 8003582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800358a:	4291      	cmp	r1, r2
 800358c:	d1f9      	bne.n	8003582 <memcpy+0xe>
 800358e:	bd10      	pop	{r4, pc}

08003590 <memmove>:
 8003590:	4288      	cmp	r0, r1
 8003592:	b510      	push	{r4, lr}
 8003594:	eb01 0402 	add.w	r4, r1, r2
 8003598:	d902      	bls.n	80035a0 <memmove+0x10>
 800359a:	4284      	cmp	r4, r0
 800359c:	4623      	mov	r3, r4
 800359e:	d807      	bhi.n	80035b0 <memmove+0x20>
 80035a0:	1e43      	subs	r3, r0, #1
 80035a2:	42a1      	cmp	r1, r4
 80035a4:	d008      	beq.n	80035b8 <memmove+0x28>
 80035a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035ae:	e7f8      	b.n	80035a2 <memmove+0x12>
 80035b0:	4402      	add	r2, r0
 80035b2:	4601      	mov	r1, r0
 80035b4:	428a      	cmp	r2, r1
 80035b6:	d100      	bne.n	80035ba <memmove+0x2a>
 80035b8:	bd10      	pop	{r4, pc}
 80035ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035c2:	e7f7      	b.n	80035b4 <memmove+0x24>

080035c4 <_free_r>:
 80035c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035c6:	2900      	cmp	r1, #0
 80035c8:	d048      	beq.n	800365c <_free_r+0x98>
 80035ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035ce:	9001      	str	r0, [sp, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f1a1 0404 	sub.w	r4, r1, #4
 80035d6:	bfb8      	it	lt
 80035d8:	18e4      	addlt	r4, r4, r3
 80035da:	f000 f8d3 	bl	8003784 <__malloc_lock>
 80035de:	4a20      	ldr	r2, [pc, #128]	; (8003660 <_free_r+0x9c>)
 80035e0:	9801      	ldr	r0, [sp, #4]
 80035e2:	6813      	ldr	r3, [r2, #0]
 80035e4:	4615      	mov	r5, r2
 80035e6:	b933      	cbnz	r3, 80035f6 <_free_r+0x32>
 80035e8:	6063      	str	r3, [r4, #4]
 80035ea:	6014      	str	r4, [r2, #0]
 80035ec:	b003      	add	sp, #12
 80035ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035f2:	f000 b8cd 	b.w	8003790 <__malloc_unlock>
 80035f6:	42a3      	cmp	r3, r4
 80035f8:	d90b      	bls.n	8003612 <_free_r+0x4e>
 80035fa:	6821      	ldr	r1, [r4, #0]
 80035fc:	1862      	adds	r2, r4, r1
 80035fe:	4293      	cmp	r3, r2
 8003600:	bf04      	itt	eq
 8003602:	681a      	ldreq	r2, [r3, #0]
 8003604:	685b      	ldreq	r3, [r3, #4]
 8003606:	6063      	str	r3, [r4, #4]
 8003608:	bf04      	itt	eq
 800360a:	1852      	addeq	r2, r2, r1
 800360c:	6022      	streq	r2, [r4, #0]
 800360e:	602c      	str	r4, [r5, #0]
 8003610:	e7ec      	b.n	80035ec <_free_r+0x28>
 8003612:	461a      	mov	r2, r3
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	b10b      	cbz	r3, 800361c <_free_r+0x58>
 8003618:	42a3      	cmp	r3, r4
 800361a:	d9fa      	bls.n	8003612 <_free_r+0x4e>
 800361c:	6811      	ldr	r1, [r2, #0]
 800361e:	1855      	adds	r5, r2, r1
 8003620:	42a5      	cmp	r5, r4
 8003622:	d10b      	bne.n	800363c <_free_r+0x78>
 8003624:	6824      	ldr	r4, [r4, #0]
 8003626:	4421      	add	r1, r4
 8003628:	1854      	adds	r4, r2, r1
 800362a:	42a3      	cmp	r3, r4
 800362c:	6011      	str	r1, [r2, #0]
 800362e:	d1dd      	bne.n	80035ec <_free_r+0x28>
 8003630:	681c      	ldr	r4, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	6053      	str	r3, [r2, #4]
 8003636:	4421      	add	r1, r4
 8003638:	6011      	str	r1, [r2, #0]
 800363a:	e7d7      	b.n	80035ec <_free_r+0x28>
 800363c:	d902      	bls.n	8003644 <_free_r+0x80>
 800363e:	230c      	movs	r3, #12
 8003640:	6003      	str	r3, [r0, #0]
 8003642:	e7d3      	b.n	80035ec <_free_r+0x28>
 8003644:	6825      	ldr	r5, [r4, #0]
 8003646:	1961      	adds	r1, r4, r5
 8003648:	428b      	cmp	r3, r1
 800364a:	bf04      	itt	eq
 800364c:	6819      	ldreq	r1, [r3, #0]
 800364e:	685b      	ldreq	r3, [r3, #4]
 8003650:	6063      	str	r3, [r4, #4]
 8003652:	bf04      	itt	eq
 8003654:	1949      	addeq	r1, r1, r5
 8003656:	6021      	streq	r1, [r4, #0]
 8003658:	6054      	str	r4, [r2, #4]
 800365a:	e7c7      	b.n	80035ec <_free_r+0x28>
 800365c:	b003      	add	sp, #12
 800365e:	bd30      	pop	{r4, r5, pc}
 8003660:	20000090 	.word	0x20000090

08003664 <_malloc_r>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	1ccd      	adds	r5, r1, #3
 8003668:	f025 0503 	bic.w	r5, r5, #3
 800366c:	3508      	adds	r5, #8
 800366e:	2d0c      	cmp	r5, #12
 8003670:	bf38      	it	cc
 8003672:	250c      	movcc	r5, #12
 8003674:	2d00      	cmp	r5, #0
 8003676:	4606      	mov	r6, r0
 8003678:	db01      	blt.n	800367e <_malloc_r+0x1a>
 800367a:	42a9      	cmp	r1, r5
 800367c:	d903      	bls.n	8003686 <_malloc_r+0x22>
 800367e:	230c      	movs	r3, #12
 8003680:	6033      	str	r3, [r6, #0]
 8003682:	2000      	movs	r0, #0
 8003684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003686:	f000 f87d 	bl	8003784 <__malloc_lock>
 800368a:	4921      	ldr	r1, [pc, #132]	; (8003710 <_malloc_r+0xac>)
 800368c:	680a      	ldr	r2, [r1, #0]
 800368e:	4614      	mov	r4, r2
 8003690:	b99c      	cbnz	r4, 80036ba <_malloc_r+0x56>
 8003692:	4f20      	ldr	r7, [pc, #128]	; (8003714 <_malloc_r+0xb0>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b923      	cbnz	r3, 80036a2 <_malloc_r+0x3e>
 8003698:	4621      	mov	r1, r4
 800369a:	4630      	mov	r0, r6
 800369c:	f000 f862 	bl	8003764 <_sbrk_r>
 80036a0:	6038      	str	r0, [r7, #0]
 80036a2:	4629      	mov	r1, r5
 80036a4:	4630      	mov	r0, r6
 80036a6:	f000 f85d 	bl	8003764 <_sbrk_r>
 80036aa:	1c43      	adds	r3, r0, #1
 80036ac:	d123      	bne.n	80036f6 <_malloc_r+0x92>
 80036ae:	230c      	movs	r3, #12
 80036b0:	6033      	str	r3, [r6, #0]
 80036b2:	4630      	mov	r0, r6
 80036b4:	f000 f86c 	bl	8003790 <__malloc_unlock>
 80036b8:	e7e3      	b.n	8003682 <_malloc_r+0x1e>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	1b5b      	subs	r3, r3, r5
 80036be:	d417      	bmi.n	80036f0 <_malloc_r+0x8c>
 80036c0:	2b0b      	cmp	r3, #11
 80036c2:	d903      	bls.n	80036cc <_malloc_r+0x68>
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	441c      	add	r4, r3
 80036c8:	6025      	str	r5, [r4, #0]
 80036ca:	e004      	b.n	80036d6 <_malloc_r+0x72>
 80036cc:	6863      	ldr	r3, [r4, #4]
 80036ce:	42a2      	cmp	r2, r4
 80036d0:	bf0c      	ite	eq
 80036d2:	600b      	streq	r3, [r1, #0]
 80036d4:	6053      	strne	r3, [r2, #4]
 80036d6:	4630      	mov	r0, r6
 80036d8:	f000 f85a 	bl	8003790 <__malloc_unlock>
 80036dc:	f104 000b 	add.w	r0, r4, #11
 80036e0:	1d23      	adds	r3, r4, #4
 80036e2:	f020 0007 	bic.w	r0, r0, #7
 80036e6:	1ac2      	subs	r2, r0, r3
 80036e8:	d0cc      	beq.n	8003684 <_malloc_r+0x20>
 80036ea:	1a1b      	subs	r3, r3, r0
 80036ec:	50a3      	str	r3, [r4, r2]
 80036ee:	e7c9      	b.n	8003684 <_malloc_r+0x20>
 80036f0:	4622      	mov	r2, r4
 80036f2:	6864      	ldr	r4, [r4, #4]
 80036f4:	e7cc      	b.n	8003690 <_malloc_r+0x2c>
 80036f6:	1cc4      	adds	r4, r0, #3
 80036f8:	f024 0403 	bic.w	r4, r4, #3
 80036fc:	42a0      	cmp	r0, r4
 80036fe:	d0e3      	beq.n	80036c8 <_malloc_r+0x64>
 8003700:	1a21      	subs	r1, r4, r0
 8003702:	4630      	mov	r0, r6
 8003704:	f000 f82e 	bl	8003764 <_sbrk_r>
 8003708:	3001      	adds	r0, #1
 800370a:	d1dd      	bne.n	80036c8 <_malloc_r+0x64>
 800370c:	e7cf      	b.n	80036ae <_malloc_r+0x4a>
 800370e:	bf00      	nop
 8003710:	20000090 	.word	0x20000090
 8003714:	20000094 	.word	0x20000094

08003718 <_realloc_r>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	4607      	mov	r7, r0
 800371c:	4614      	mov	r4, r2
 800371e:	460e      	mov	r6, r1
 8003720:	b921      	cbnz	r1, 800372c <_realloc_r+0x14>
 8003722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003726:	4611      	mov	r1, r2
 8003728:	f7ff bf9c 	b.w	8003664 <_malloc_r>
 800372c:	b922      	cbnz	r2, 8003738 <_realloc_r+0x20>
 800372e:	f7ff ff49 	bl	80035c4 <_free_r>
 8003732:	4625      	mov	r5, r4
 8003734:	4628      	mov	r0, r5
 8003736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003738:	f000 f830 	bl	800379c <_malloc_usable_size_r>
 800373c:	42a0      	cmp	r0, r4
 800373e:	d20f      	bcs.n	8003760 <_realloc_r+0x48>
 8003740:	4621      	mov	r1, r4
 8003742:	4638      	mov	r0, r7
 8003744:	f7ff ff8e 	bl	8003664 <_malloc_r>
 8003748:	4605      	mov	r5, r0
 800374a:	2800      	cmp	r0, #0
 800374c:	d0f2      	beq.n	8003734 <_realloc_r+0x1c>
 800374e:	4631      	mov	r1, r6
 8003750:	4622      	mov	r2, r4
 8003752:	f7ff ff0f 	bl	8003574 <memcpy>
 8003756:	4631      	mov	r1, r6
 8003758:	4638      	mov	r0, r7
 800375a:	f7ff ff33 	bl	80035c4 <_free_r>
 800375e:	e7e9      	b.n	8003734 <_realloc_r+0x1c>
 8003760:	4635      	mov	r5, r6
 8003762:	e7e7      	b.n	8003734 <_realloc_r+0x1c>

08003764 <_sbrk_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4d06      	ldr	r5, [pc, #24]	; (8003780 <_sbrk_r+0x1c>)
 8003768:	2300      	movs	r3, #0
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	f7fd fce4 	bl	800113c <_sbrk>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_sbrk_r+0x1a>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	b103      	cbz	r3, 800377e <_sbrk_r+0x1a>
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	20000214 	.word	0x20000214

08003784 <__malloc_lock>:
 8003784:	4801      	ldr	r0, [pc, #4]	; (800378c <__malloc_lock+0x8>)
 8003786:	f000 b811 	b.w	80037ac <__retarget_lock_acquire_recursive>
 800378a:	bf00      	nop
 800378c:	2000021c 	.word	0x2000021c

08003790 <__malloc_unlock>:
 8003790:	4801      	ldr	r0, [pc, #4]	; (8003798 <__malloc_unlock+0x8>)
 8003792:	f000 b80c 	b.w	80037ae <__retarget_lock_release_recursive>
 8003796:	bf00      	nop
 8003798:	2000021c 	.word	0x2000021c

0800379c <_malloc_usable_size_r>:
 800379c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a0:	1f18      	subs	r0, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bfbc      	itt	lt
 80037a6:	580b      	ldrlt	r3, [r1, r0]
 80037a8:	18c0      	addlt	r0, r0, r3
 80037aa:	4770      	bx	lr

080037ac <__retarget_lock_acquire_recursive>:
 80037ac:	4770      	bx	lr

080037ae <__retarget_lock_release_recursive>:
 80037ae:	4770      	bx	lr

080037b0 <_init>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr

080037bc <_fini>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	bf00      	nop
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr
